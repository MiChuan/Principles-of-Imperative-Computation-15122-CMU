#use <conio>

/*******************************************************/
/*** Some more exciting priority functions!  ****/
/********************************************************/


// Finds the element with k'th priority in the PQ
elem  k_priority(pq_t H, int k)
//@requires H != NULL && !pq_empty(H);
{
  elem res = NULL;
  elem[] E = alloc_array(elem, k);
  for (int i = 0; i < k; i++) {
    E[i] = pq_rem(H);
    if (i == k - 1) {
      res = E[i];
    }
  }
  for (int i = 0; i < k; i++) {
    pq_add(H, E[i]);
  }
  return res;
}


elem median(pq_t H)
//@requires H != NULL && !pq_empty(H);
{
  elem res = NULL;
  int size = pq_size(H);
  int median = size / 2 + 1;
  elem[] E = alloc_array(elem, median);
  for (int i = 0; i < median; i++) {
    E[i] = pq_rem(H);
    if (i == median - 1) {
      res = E[i];
    }
  }
  for (int i = 0; i < median; i++) {
    pq_add(H, E[i]);
  }
  return res;
}

/************************/
/*** Code for testing ***/
/************************/

bool higher_priority(void* x, void* y)
//@requires x != NULL && \hastag(int*, x);
//@requires y != NULL && \hastag(int*, y);
{
   return *(int*) x < *(int*) y;
}


int main() {

  // elements to add
  int* p = alloc(int);
  *p = 5;
  elem x =  (void*)p;

  int *q = alloc(int);
  *q = 6;
  elem y = (void*)q;

  int *r = alloc(int);
  *r = 7;
  elem z = (void*)r;

  // make a new priority queue
  // this is essentially a min-heap
  pq_t test = pq_new(&higher_priority);

  // insert some things into it
  pq_add(test, x);
  pq_add(test, y);
  pq_add(test, z);

  // set priority
  int k = 3;

  elem result = k_priority(test, k);

  printint(k); print("-th: ");
  printint(*(int*)result);

  elem median = median(test);
  print("\nMedian: ");
  printint(*(int*)median);
  println("\n");


  return 0;
}
