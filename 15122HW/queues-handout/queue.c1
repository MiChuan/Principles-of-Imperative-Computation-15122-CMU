/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */
#use <conio>

/************************/
/*** Client interface ***/
/************************/

typedef bool check_property_fn(void* x);
typedef void* iterate_fn(void* accum, void* x);


/**********************/
/*** Implementation ***/
/**********************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};

//helper function for is_queue
bool is_inclusive_segment(list* start, list* end, int i, int length) {
  if (start == NULL) return false;
  if (length > i) return false; // check circle
  if (start == end && start->next == NULL && length == i) return true;
  length++;
  return is_inclusive_segment(start->next,  end, i, length);
}

//is_queue main function
bool is_queue(queue* Q) {
  int length = 1;
  return Q != NULL
         && ((Q->front == NULL && Q->size == 0) // check empty queue
         || (is_inclusive_segment(Q->front, Q->back, Q->size, length)));
}

//return the size of queue
int queue_size(queue* Q)
//@requires is_queue(Q);
//@ensures 0 <= \result; 
{
  return Q->size;
}

/* Other functions go there */
// generate a new queue
queue* queue_new()
//@ensures is_queue(\result);
//@ensures queue_size(\result) == 0;
{
  queue* Q = alloc(queue);
  Q->front = NULL;
  Q->size = 0;
  return Q;
}

//enqueue an elem
void enq(queue* Q, void* x)
//@requires is_queue(Q);
//@ensures is_queue(Q);
{
  list* l = alloc(list);
  l->data = x;
  l->next = NULL;
  if (Q->size == 0) {
    Q->front = l;
    Q->back = l;
    Q->size++;
  } else {
    Q->back->next = l;
    Q->back = l;
    Q->size++;
  }
}

//dequeue an elem
void* deq(queue* Q)
//@requires is_queue(Q) && queue_size(Q) > 0;
//@ensures is_queue(Q);
{
  void* elem = Q->front->data;
  Q->front = Q->front->next;
  Q->size--;
  return elem;
}

//peek an elem
void* queue_peek(queue* Q, int i)
//@requires is_queue(Q);
//@requires 0 <= i && i < queue_size(Q);
//@ensures is_queue(Q);
{
  if (Q->size == 0) return NULL;
  int count = 0;
  for (list* q = Q->front; q != NULL; q = q->next) {
    if (count == i) return q->data;
    count++;
  }
  return NULL;
}

// reverse a queue
void queue_reverse(queue* Q) 
//@requires is_queue(Q);
//@ensures is_queue(Q);
{
  if (Q->size == 0) return;
  if (Q->size == 1) return;
  list* first = Q->front;
  list* curr = first->next;
  list* prev = first;
  if (Q->size == 2) {
    Q->back->next = Q->front;
    Q->front->next = NULL;
    Q->front = curr;
    Q->back = first;
    return;
  }
  while (curr != Q->back)
  {
    if (prev == Q->front) {
      prev->next = NULL;
    }
    list* tmp_curr = curr->next;
    curr->next = prev;
    prev = curr;
    curr = tmp_curr;
  }
  Q->back->next = prev;
  Q->front = Q->back;
  Q->back = first;
  return;
}

//check property return true on all elem of the queue
bool queue_all(queue* Q, check_property_fn* P)
//@requires is_queue(Q) && P != NULL;
{
  if (Q->size == 0) return true;
  for (list* q = Q->front; q != NULL; q = q->next) {
    if (!(*P)(q->data)) return false;
  }
  return true;
}

//this is the queue interator
void* queue_iterate(queue* Q, void* base, iterate_fn* F)
//@requires is_queue(Q) && F != NULL;
{
  if (Q->size == 0) return base;
  void* accum = base;
  for (list* q = Q->front; q != NULL; q = q->next) {
    accum = (*F)(accum, q->data);
  }
  return accum;
}



// Client type
typedef queue* queue_t;


/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;
