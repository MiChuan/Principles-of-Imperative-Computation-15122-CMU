/*
 * Doubly linked lists with point
 *
 * A text buffer is a doubly linked list (dll), where one of the
 * elements in the dll is designated as containing the point.  The
 * list is terminated on both ends with dummy nodes whose contents are
 * never inspected.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface (missing appropriate contracts) ***/

typedef struct dll_node dll;
struct dll_node {
  elem data; /* This is defined elsewhere (gapbuf.c0 or elem-char.c0) */
  dll* next;
  dll* prev;
};

typedef struct dll_pt_header dll_pt;
struct dll_pt_header {
  dll* start; /* the first node of the list (to the left)  */
  dll* point; /* the current node of the list (where the cursor is) */
  dll* end;   /* the last node of the list (to the right) */
};

bool is_dll_pt(dll_pt* B);

bool dll_pt_at_left(dll_pt* B);  /* Returns true if the point is first  */
                                 /*   first (non-terminal) node         */
bool dll_pt_at_right(dll_pt* B); /* Returns true if the point is last   */
                                 /*   last (non-terminal) node          */

void dll_pt_forward(dll_pt* B);  /* Moves the point forward (right)     */
void dll_pt_backward(dll_pt* B); /* Moves the point backward (left)     */
void dll_pt_delete(dll_pt* B);   /* Remove the current point            */

/*** Implementation ***/

//  this is the is segment helper function for is_dll_pt
bool is_dll_segment(dll* start, dll* end)
{
  if ((start == NULL) || (end == NULL)) return false;
  dll* pre = start;
  dll* post = start;
  while (post != NULL) 
  //@loop_invariant (pre == post) || (pre->next == post);
  {
    if (!((pre == post) || 
      (post->prev == pre && pre->next == post)))
       return false;
    if (post == end) return true;
    pre = post;
    post = post->next;
  }
  return false;
}

//this is the is_dll_pt  main function
bool is_dll_pt(dll_pt* B)
{
  if (B == NULL || (B->start == B->point) ||
                   (B->point == B->end) ||
                   (B->start == B->end)) return false;
  assert ((B != NULL) &&
            (B->start != B->point) &&
            (B->point != B->end) &&
            (B->start != B->end));
  if (!is_dll_segment(B->start, B->point) ||
      !is_dll_segment(B->point, B->end)) return false;
  return true;
}

// this function return whether pt is at the very left of dll
bool dll_pt_at_left(dll_pt* B)
//@requires is_dll_pt(B);
{
  return B->point->prev == B->start;
}

// this function return whether pt is at the very right of dll
bool dll_pt_at_right(dll_pt* B)
//@requires is_dll_pt(B);
{
  return B->point->next == B->end;
}

// this function move the pt forward
void dll_pt_forward(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !dll_pt_at_right(B);
//@ensures is_dll_pt(B);
{
  B->point = B->point->next;
}

// this function move the pt backward
void dll_pt_backward(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !dll_pt_at_left(B);
//@ensures is_dll_pt(B);
{
  B->point = B->point->prev;
}


// this function delete node in dll
void dll_pt_delete(dll_pt* B)
//@requires is_dll_pt(B);
//@requires !(dll_pt_at_left(B) && dll_pt_at_right(B));
//@ensures is_dll_pt(B);
{

  if (dll_pt_at_left(B)) {
    B->start->next = B->point->next;
    B->point->next->prev = B->start;
    B->point = B->point->next;
  }
  else if (dll_pt_at_right(B)) {
    B->end->prev = B->point->prev;
    B->point = B->point->prev;
    B->point->next = B->end;
  }
  else {
    B->point->next->prev = B->point->prev;
    B->point->prev->next = B->point->next;
    B->point = B->point->next;
  }
}








