/*
 * Gap Buffers
 *
 * A gap buffer data structure is represented by an array of chars
 * stored along with its size (limit) and two integers representing
 * the beginning (inclusive, gap start) and end (exclusive, gap end)
 * of the gap.
 *
 * 15-122 Principles of Imperative Computation */

#use <string>



typedef struct gapbuf_header gapbuf;
typedef gapbuf* elem; // The data in the linked lists are gap buffers

/*** Interface (missing appropriate contracts) ***/

struct gapbuf_header {
  int limit;     /* limit > 0                      */
  char[] buffer; /* \length(buffer) == limit       */
  int gap_start; /* 0 <= gap_start                 */
  int gap_end;   /* gap_start  <= gap_end <= limit */
};

bool is_gapbuf(gapbuf* G);

bool gapbuf_empty(gapbuf* G);    /* Returns true if the buffer is empty */
bool gapbuf_full(gapbuf* G);     /* Returns true if the buffer is full  */
bool gapbuf_at_left(gapbuf* G);  /* Returns true if the gap is at the   */
                                 /*   left end of the buffer            */
bool gapbuf_at_right(gapbuf* G); /* Returns true if the gap is at the   */
                                 /*   right end of the buffer           */

gapbuf* gapbuf_new(int limit);   /* Create a new gapbuf of size limit   */
void gapbuf_forward(gapbuf* G);  /* Move the gap forward, to the right  */
void gapbuf_backward(gapbuf* G); /* Move the gap backward, to the left  */
void gapbuf_insert(gapbuf* G, char c); /* Insert char c before the gap  */
void gapbuf_delete(gapbuf* G);   /* Delete the char before the gap      */

/*** Implementation ***/


// this is the helper function for is_gapbuf
bool is_array_expected_length(char[] A, int length) {  
  //@assert \length(A) == length;
  return true;  
}

// this is the data structure invariant
bool is_gapbuf(gapbuf* G)
{
  return
    (G != NULL) &&
    (0 < G->limit) &&
    (is_array_expected_length(G->buffer, G->limit)) &&
    (0 <= G->gap_start) &&
    (G->gap_start <= G->gap_end) &&
    (G->gap_end <= G->limit);
}

// this the function to check whether gapbuf is empty
bool gapbuf_empty(gapbuf* G)
//@requires is_gapbuf(G);
{
  return (G->gap_start == 0) &&
         (G->gap_end == G->limit);
}

// this the function to check whether gapbuf is full
bool gapbuf_full(gapbuf* G)
//@requires is_gapbuf(G);
{
  return (G->gap_start) == (G->gap_end);
}

// this the function to check whether gap_start
// is at the left end of the buffer
bool gapbuf_at_left(gapbuf* G)
//@requires is_gapbuf(G);
{
  return (G->gap_start == 0);
}

// this the function to check whether gap_start
// is at the right end of the buffer
bool gapbuf_at_right(gapbuf* G)
//@requires is_gapbuf(G);
{
  return (G->gap_end == G->limit);
}

// this is function generate a brand new gapbuf
gapbuf* gapbuf_new(int limit)
//@requires limit > 0;
//@ensures is_gapbuf(\result);
//@ensures gapbuf_empty(\result) && \result->limit == limit;
{
  gapbuf* G = alloc(gapbuf);
  G->limit = limit;
  G->gap_start = 0;
  G->gap_end = G->limit;
  G->buffer = alloc_array(char, G->limit);
  return G;
}

//this void function moves the gap forward
void gapbuf_forward(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_right(G);
//@ensures is_gapbuf(G);
{
  G->buffer[G->gap_start] = G->buffer[G->gap_end];
  G->gap_start++;
  G->gap_end++;
}

//this void function moves the gap backward
void gapbuf_backward(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_at_left(G);
//@ensures is_gapbuf(G);
{
  G->gap_end--;
  G->gap_start--;
  G->buffer[G->gap_end] = G->buffer[G->gap_start];
}


// this function indert a char before the gap
// if the buffer is not full
void gapbuf_insert(gapbuf* G, char c)
//@requires is_gapbuf(G);
//@requires !gapbuf_full(G);
//@ensures is_gapbuf(G);
{
  G->buffer[G->gap_start] = c;
  G->gap_start++;
}

// delete the char before the gap
void gapbuf_delete(gapbuf* G)
//@requires is_gapbuf(G);
//@requires !gapbuf_empty(G);
//@ensures is_gapbuf(G);
{
  G->gap_start--;
}








