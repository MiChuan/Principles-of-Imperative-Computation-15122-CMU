C0 C0 FF EE       # magic number
00 13             # version 9, arch = 1 (64 bits)

00 00             # int pool count
# int pool

21 4E             # string pool total size
# string pool
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 31 39 2E 36 2D 31 39 2E 35 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:19.6-19.50: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 32 33 2E 36 2D 32 34 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:23.6-24.55: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 33 31 2E 36 2D 33 31 2E 36 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:31.6-31.69: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 33 32 2E 36 2D 33 32 2E 35 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:32.6-32.52: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 33 37 2E 36 2D 33 37 2E 34 34 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:37.6-37.44: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 34 33 2E 36 2D 34 33 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:43.6-43.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 34 34 2E 36 2D 34 34 2E 34 32 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:44.6-44.42: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 34 35 2E 31 34 2D 34 35 2E 33 39 00  # "/afs/andrew/course/15/122/lib/string.h0:45.14-45.39"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 34 35 2E 36 2D 34 35 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:45.6-45.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 35 32 2E 36 2D 35 32 2E 34 31 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:52.6-52.41: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 35 36 2E 36 2D 35 36 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:56.6-56.55: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 35 37 2E 31 34 2D 35 37 2E 36 32 00  # "/afs/andrew/course/15/122/lib/string.h0:57.14-57.62"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 35 37 2E 36 2D 35 37 2E 36 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:57.6-57.63: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 36 32 2E 31 35 2D 36 32 2E 34 37 00  # "/afs/andrew/course/15/122/lib/string.h0:62.15-62.47"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 36 32 2E 36 2D 36 32 2E 34 38 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:62.6-62.48: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 36 33 2E 36 2D 36 33 2E 35 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:63.6-63.55: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 36 37 2E 36 2D 36 37 2E 34 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "/afs/andrew/course/15/122/lib/string.h0:67.6-67.45: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 73 74 72 69 6E 67 2E 68 30 3A 36 39 2E 36 2D 36 39 2E 33 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/string.h0:69.6-69.34: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 34 37 2E 36 2D 34 37 2E 33 34 3A 20 40 61 73 73 65 72 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:47.6-47.34: @assert annotation failed"
67 61 70 62 75 66 2E 63 30 3A 35 37 2E 36 2D 35 37 2E 35 31 00  # "gapbuf.c0:57.6-57.51"
67 61 70 62 75 66 2E 63 30 3A 36 35 2E 31 33 2D 36 35 2E 32 35 00  # "gapbuf.c0:65.13-65.25"
67 61 70 62 75 66 2E 63 30 3A 36 35 2E 34 2D 36 35 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:65.4-65.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 37 33 2E 31 33 2D 37 33 2E 32 35 00  # "gapbuf.c0:73.13-73.25"
67 61 70 62 75 66 2E 63 30 3A 37 33 2E 34 2D 37 33 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:73.4-73.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 38 31 2E 31 33 2D 38 31 2E 32 35 00  # "gapbuf.c0:81.13-81.25"
67 61 70 62 75 66 2E 63 30 3A 38 31 2E 34 2D 38 31 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:81.4-81.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 38 39 2E 31 33 2D 38 39 2E 32 35 00  # "gapbuf.c0:89.13-89.25"
67 61 70 62 75 66 2E 63 30 3A 38 39 2E 34 2D 38 39 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:89.4-89.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 39 36 2E 34 2D 39 36 2E 32 33 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:96.4-96.23: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 39 37 2E 31 32 2D 39 37 2E 33 30 00  # "gapbuf.c0:97.12-97.30"
67 61 70 62 75 66 2E 63 30 3A 39 37 2E 34 2D 39 37 2E 33 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:97.4-97.31: @ensures annotation failed"
67 61 70 62 75 66 2E 63 30 3A 39 38 2E 31 32 2D 39 38 2E 33 33 00  # "gapbuf.c0:98.12-98.33"
67 61 70 62 75 66 2E 63 30 3A 39 38 2E 34 2D 39 38 2E 36 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:98.4-98.61: @ensures annotation failed"
67 61 70 62 75 66 2E 63 30 3A 31 31 30 2E 31 33 2D 31 31 30 2E 32 35 00  # "gapbuf.c0:110.13-110.25"
67 61 70 62 75 66 2E 63 30 3A 31 31 30 2E 34 2D 31 31 30 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:110.4-110.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 31 31 2E 31 34 2D 31 31 31 2E 33 32 00  # "gapbuf.c0:111.14-111.32"
67 61 70 62 75 66 2E 63 30 3A 31 31 31 2E 34 2D 31 31 31 2E 33 33 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:111.4-111.33: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 31 32 2E 31 32 2D 31 31 32 2E 32 34 00  # "gapbuf.c0:112.12-112.24"
67 61 70 62 75 66 2E 63 30 3A 31 31 32 2E 34 2D 31 31 32 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:112.4-112.25: @ensures annotation failed"
67 61 70 62 75 66 2E 63 30 3A 31 32 31 2E 31 33 2D 31 32 31 2E 32 35 00  # "gapbuf.c0:121.13-121.25"
67 61 70 62 75 66 2E 63 30 3A 31 32 31 2E 34 2D 31 32 31 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:121.4-121.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 32 32 2E 31 34 2D 31 32 32 2E 33 31 00  # "gapbuf.c0:122.14-122.31"
67 61 70 62 75 66 2E 63 30 3A 31 32 32 2E 34 2D 31 32 32 2E 33 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:122.4-122.32: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 32 33 2E 31 32 2D 31 32 33 2E 32 34 00  # "gapbuf.c0:123.12-123.24"
67 61 70 62 75 66 2E 63 30 3A 31 32 33 2E 34 2D 31 32 33 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:123.4-123.25: @ensures annotation failed"
67 61 70 62 75 66 2E 63 30 3A 31 33 34 2E 31 33 2D 31 33 34 2E 32 35 00  # "gapbuf.c0:134.13-134.25"
67 61 70 62 75 66 2E 63 30 3A 31 33 34 2E 34 2D 31 33 34 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:134.4-134.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 33 35 2E 31 34 2D 31 33 35 2E 32 38 00  # "gapbuf.c0:135.14-135.28"
67 61 70 62 75 66 2E 63 30 3A 31 33 35 2E 34 2D 31 33 35 2E 32 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:135.4-135.29: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 33 36 2E 31 32 2D 31 33 36 2E 32 34 00  # "gapbuf.c0:136.12-136.24"
67 61 70 62 75 66 2E 63 30 3A 31 33 36 2E 34 2D 31 33 36 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:136.4-136.25: @ensures annotation failed"
67 61 70 62 75 66 2E 63 30 3A 31 34 34 2E 31 33 2D 31 34 34 2E 32 35 00  # "gapbuf.c0:144.13-144.25"
67 61 70 62 75 66 2E 63 30 3A 31 34 34 2E 34 2D 31 34 34 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:144.4-144.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 34 35 2E 31 34 2D 31 34 35 2E 32 39 00  # "gapbuf.c0:145.14-145.29"
67 61 70 62 75 66 2E 63 30 3A 31 34 35 2E 34 2D 31 34 35 2E 33 30 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "gapbuf.c0:145.4-145.30: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
67 61 70 62 75 66 2E 63 30 3A 31 34 36 2E 31 32 2D 31 34 36 2E 32 34 00  # "gapbuf.c0:146.12-146.24"
67 61 70 62 75 66 2E 63 30 3A 31 34 36 2E 34 2D 31 34 36 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "gapbuf.c0:146.4-146.25: @ensures annotation failed"
64 6C 6C 5F 70 74 2E 63 30 3A 34 37 2E 36 2D 34 37 2E 35 38 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "dll_pt.c0:47.6-47.58: @loop_invariant annotation failed"
64 6C 6C 5F 70 74 2E 63 30 3A 36 35 2E 33 2D 36 38 2E 33 35 3A 20 61 73 73 65 72 74 20 66 61 69 6C 65 64 00  # "dll_pt.c0:65.3-68.35: assert failed"
64 6C 6C 5F 70 74 2E 63 30 3A 36 39 2E 38 2D 36 39 2E 34 32 00  # "dll_pt.c0:69.8-69.42"
64 6C 6C 5F 70 74 2E 63 30 3A 37 30 2E 38 2D 37 30 2E 34 30 00  # "dll_pt.c0:70.8-70.40"
64 6C 6C 5F 70 74 2E 63 30 3A 37 36 2E 31 33 2D 37 36 2E 32 35 00  # "dll_pt.c0:76.13-76.25"
64 6C 6C 5F 70 74 2E 63 30 3A 37 36 2E 34 2D 37 36 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:76.4-76.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 38 33 2E 31 33 2D 38 33 2E 32 35 00  # "dll_pt.c0:83.13-83.25"
64 6C 6C 5F 70 74 2E 63 30 3A 38 33 2E 34 2D 38 33 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:83.4-83.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 39 30 2E 31 33 2D 39 30 2E 32 35 00  # "dll_pt.c0:90.13-90.25"
64 6C 6C 5F 70 74 2E 63 30 3A 39 30 2E 34 2D 39 30 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:90.4-90.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 39 31 2E 31 34 2D 39 31 2E 33 32 00  # "dll_pt.c0:91.14-91.32"
64 6C 6C 5F 70 74 2E 63 30 3A 39 31 2E 34 2D 39 31 2E 33 33 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:91.4-91.33: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 39 32 2E 31 32 2D 39 32 2E 32 34 00  # "dll_pt.c0:92.12-92.24"
64 6C 6C 5F 70 74 2E 63 30 3A 39 32 2E 34 2D 39 32 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "dll_pt.c0:92.4-92.25: @ensures annotation failed"
64 6C 6C 5F 70 74 2E 63 30 3A 39 39 2E 31 33 2D 39 39 2E 32 35 00  # "dll_pt.c0:99.13-99.25"
64 6C 6C 5F 70 74 2E 63 30 3A 39 39 2E 34 2D 39 39 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:99.4-99.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 30 2E 31 34 2D 31 30 30 2E 33 31 00  # "dll_pt.c0:100.14-100.31"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 30 2E 34 2D 31 30 30 2E 33 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:100.4-100.32: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 31 2E 31 32 2D 31 30 31 2E 32 34 00  # "dll_pt.c0:101.12-101.24"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 31 2E 34 2D 31 30 31 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "dll_pt.c0:101.4-101.25: @ensures annotation failed"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 39 2E 31 33 2D 31 30 39 2E 32 35 00  # "dll_pt.c0:109.13-109.25"
64 6C 6C 5F 70 74 2E 63 30 3A 31 30 39 2E 34 2D 31 30 39 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:109.4-109.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 30 2E 31 35 2D 31 31 30 2E 33 32 00  # "dll_pt.c0:110.15-110.32"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 30 2E 33 36 2D 31 31 30 2E 35 34 00  # "dll_pt.c0:110.36-110.54"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 30 2E 34 2D 31 31 30 2E 35 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "dll_pt.c0:110.4-110.56: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 34 2E 37 2D 31 31 34 2E 32 34 00  # "dll_pt.c0:114.7-114.24"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 39 2E 31 32 2D 31 31 39 2E 33 30 00  # "dll_pt.c0:119.12-119.30"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 31 2E 31 32 2D 31 31 31 2E 32 34 00  # "dll_pt.c0:111.12-111.24"
64 6C 6C 5F 70 74 2E 63 30 3A 31 31 31 2E 34 2D 31 31 31 2E 32 35 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "dll_pt.c0:111.4-111.25: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 33 30 2E 31 33 2D 33 30 2E 32 35 00  # "tbuf.c0:30.13-30.25"
74 62 75 66 2E 63 30 3A 33 30 2E 34 2D 33 30 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:30.4-30.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 33 33 2E 36 2D 33 33 2E 34 36 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:33.6-33.46: @loop_invariant annotation failed"
74 62 75 66 2E 63 30 3A 33 35 2E 31 30 2D 33 35 2E 33 34 00  # "tbuf.c0:35.10-35.34"
74 62 75 66 2E 63 30 3A 33 38 2E 36 2D 33 38 2E 33 31 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:38.6-38.31: @loop_invariant annotation failed"
74 62 75 66 2E 63 30 3A 34 30 2E 31 30 2D 34 30 2E 33 33 00  # "tbuf.c0:40.10-40.33"
74 62 75 66 2E 63 30 3A 34 37 2E 31 33 2D 34 37 2E 32 35 00  # "tbuf.c0:47.13-47.25"
74 62 75 66 2E 63 30 3A 34 37 2E 34 2D 34 37 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:47.4-47.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 34 39 2E 38 2D 34 39 2E 32 35 00  # "tbuf.c0:49.8-49.25"
74 62 75 66 2E 63 30 3A 34 39 2E 32 39 2D 34 39 2E 34 37 00  # "tbuf.c0:49.29-49.47"
74 62 75 66 2E 63 30 3A 35 30 2E 38 2D 35 30 2E 33 36 00  # "tbuf.c0:50.8-50.36"
74 62 75 66 2E 63 30 3A 35 32 2E 36 2D 35 32 2E 33 31 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:52.6-52.31: @loop_invariant annotation failed"
74 62 75 66 2E 63 30 3A 35 34 2E 39 2D 35 34 2E 33 30 00  # "tbuf.c0:54.9-54.30"
74 62 75 66 2E 63 30 3A 36 31 2E 31 33 2D 36 31 2E 32 35 00  # "tbuf.c0:61.13-61.25"
74 62 75 66 2E 63 30 3A 36 31 2E 34 2D 36 31 2E 32 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:61.4-61.26: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 36 34 2E 36 2D 36 34 2E 33 31 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:64.6-64.31: @loop_invariant annotation failed"
74 62 75 66 2E 63 30 3A 36 36 2E 31 32 2D 36 36 2E 33 30 00  # "tbuf.c0:66.12-66.30"
74 62 75 66 2E 63 30 3A 37 35 2E 31 30 2D 37 35 2E 32 32 00  # "tbuf.c0:75.10-75.22"
74 62 75 66 2E 63 30 3A 37 36 2E 31 30 2D 37 36 2E 33 31 00  # "tbuf.c0:76.10-76.31"
74 62 75 66 2E 63 30 3A 37 37 2E 31 30 2D 37 37 2E 34 31 00  # "tbuf.c0:77.10-77.41"
74 62 75 66 2E 63 30 3A 37 38 2E 31 30 2D 37 38 2E 32 35 00  # "tbuf.c0:78.10-78.25"
74 62 75 66 2E 63 30 3A 39 31 2E 32 30 2D 39 31 2E 33 37 00  # "tbuf.c0:91.20-91.37"
74 62 75 66 2E 63 30 3A 39 34 2E 32 30 2D 39 34 2E 33 37 00  # "tbuf.c0:94.20-94.37"
74 62 75 66 2E 63 30 3A 39 37 2E 31 38 2D 39 37 2E 33 35 00  # "tbuf.c0:97.18-97.35"
74 62 75 66 2E 63 30 3A 38 33 2E 31 32 2D 38 33 2E 32 38 00  # "tbuf.c0:83.12-83.28"
74 62 75 66 2E 63 30 3A 38 33 2E 34 2D 38 33 2E 32 39 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:83.4-83.29: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 31 30 35 2E 34 2D 31 30 35 2E 32 35 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:105.4-105.25: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 30 36 2E 34 2D 31 30 36 2E 36 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:106.4-106.66: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 30 37 2E 34 2D 31 30 37 2E 36 36 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:107.4-107.66: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 31 30 2E 38 2D 31 31 30 2E 33 30 3A 20 40 6C 6F 6F 70 5F 69 6E 76 61 72 69 61 6E 74 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:110.8-110.30: @loop_invariant annotation failed"
74 62 75 66 2E 63 30 3A 31 31 39 2E 31 33 2D 31 31 39 2E 34 31 00  # "tbuf.c0:119.13-119.41"
74 62 75 66 2E 63 30 3A 31 31 39 2E 34 2D 31 31 39 2E 34 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:119.4-119.42: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 32 30 2E 31 33 2D 31 32 30 2E 33 38 00  # "tbuf.c0:120.13-120.38"
74 62 75 66 2E 63 30 3A 31 32 30 2E 34 32 2D 31 32 30 2E 36 38 00  # "tbuf.c0:120.42-120.68"
74 62 75 66 2E 63 30 3A 31 32 30 2E 34 2D 31 32 30 2E 36 39 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:120.4-120.69: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 32 36 2E 35 2D 31 32 37 2E 33 39 00  # "tbuf.c0:126.5-127.39"
74 62 75 66 2E 63 30 3A 31 32 38 2E 35 2D 31 33 30 2E 34 32 00  # "tbuf.c0:128.5-130.42"
74 62 75 66 2E 63 30 3A 31 33 34 2E 35 2D 31 33 34 2E 37 31 00  # "tbuf.c0:134.5-134.71"
74 62 75 66 2E 63 30 3A 31 34 30 2E 35 2D 31 34 30 2E 37 30 00  # "tbuf.c0:140.5-140.70"
74 62 75 66 2E 63 30 3A 31 34 33 2E 35 2D 31 34 34 2E 34 30 00  # "tbuf.c0:143.5-144.40"
74 62 75 66 2E 63 30 3A 31 34 35 2E 35 2D 31 34 37 2E 34 33 00  # "tbuf.c0:145.5-147.43"
74 62 75 66 2E 63 30 3A 31 35 34 2E 31 33 2D 31 35 34 2E 32 33 00  # "tbuf.c0:154.13-154.23"
74 62 75 66 2E 63 30 3A 31 35 34 2E 34 2D 31 35 34 2E 32 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:154.4-154.24: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 35 35 2E 31 33 2D 31 35 35 2E 34 30 00  # "tbuf.c0:155.13-155.40"
74 62 75 66 2E 63 30 3A 31 35 35 2E 34 2D 31 35 35 2E 34 31 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:155.4-155.41: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 36 32 2E 32 35 2D 31 36 32 2E 34 32 00  # "tbuf.c0:162.25-162.42"
74 62 75 66 2E 63 30 3A 31 36 33 2E 32 36 2D 31 36 33 2E 34 33 00  # "tbuf.c0:163.26-163.43"
74 62 75 66 2E 63 30 3A 31 36 36 2E 33 2D 31 36 36 2E 35 39 00  # "tbuf.c0:166.3-166.59"
74 62 75 66 2E 63 30 3A 31 37 35 2E 37 2D 31 37 35 2E 34 33 00  # "tbuf.c0:175.7-175.43"
74 62 75 66 2E 63 30 3A 31 35 36 2E 31 32 2D 31 35 36 2E 32 32 00  # "tbuf.c0:156.12-156.22"
74 62 75 66 2E 63 30 3A 31 35 36 2E 34 2D 31 35 36 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:156.4-156.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 31 35 37 2E 31 33 2D 31 35 37 2E 34 30 00  # "tbuf.c0:157.13-157.40"
74 62 75 66 2E 63 30 3A 31 35 37 2E 34 2D 31 35 37 2E 34 31 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:157.4-157.41: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 31 38 34 2E 31 33 2D 31 38 34 2E 32 33 00  # "tbuf.c0:184.13-184.23"
74 62 75 66 2E 63 30 3A 31 38 34 2E 34 2D 31 38 34 2E 32 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:184.4-184.24: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 31 38 37 2E 37 2D 31 38 37 2E 33 38 00  # "tbuf.c0:187.7-187.38"
74 62 75 66 2E 63 30 3A 31 38 35 2E 31 32 2D 31 38 35 2E 32 32 00  # "tbuf.c0:185.12-185.22"
74 62 75 66 2E 63 30 3A 31 38 35 2E 34 2D 31 38 35 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:185.4-185.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 31 39 32 2E 37 2D 31 39 32 2E 32 34 00  # "tbuf.c0:192.7-192.24"
74 62 75 66 2E 63 30 3A 31 39 33 2E 37 2D 31 39 33 2E 33 37 00  # "tbuf.c0:193.7-193.37"
74 62 75 66 2E 63 30 3A 31 39 37 2E 35 2D 31 39 37 2E 33 35 00  # "tbuf.c0:197.5-197.35"
74 62 75 66 2E 63 30 3A 31 38 35 2E 31 32 2D 31 38 35 2E 32 32 00  # "tbuf.c0:185.12-185.22"
74 62 75 66 2E 63 30 3A 31 38 35 2E 34 2D 31 38 35 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:185.4-185.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 30 33 2E 31 33 2D 32 30 33 2E 32 33 00  # "tbuf.c0:203.13-203.23"
74 62 75 66 2E 63 30 3A 32 30 33 2E 34 2D 32 30 33 2E 32 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:203.4-203.24: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 32 30 36 2E 37 2D 32 30 36 2E 33 37 00  # "tbuf.c0:206.7-206.37"
74 62 75 66 2E 63 30 3A 32 30 34 2E 31 32 2D 32 30 34 2E 32 32 00  # "tbuf.c0:204.12-204.22"
74 62 75 66 2E 63 30 3A 32 30 34 2E 34 2D 32 30 34 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:204.4-204.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 31 31 2E 37 2D 32 31 31 2E 32 35 00  # "tbuf.c0:211.7-211.25"
74 62 75 66 2E 63 30 3A 32 31 32 2E 37 2D 32 31 32 2E 33 38 00  # "tbuf.c0:212.7-212.38"
74 62 75 66 2E 63 30 3A 32 31 36 2E 35 2D 32 31 36 2E 33 36 00  # "tbuf.c0:216.5-216.36"
74 62 75 66 2E 63 30 3A 32 30 34 2E 31 32 2D 32 30 34 2E 32 32 00  # "tbuf.c0:204.12-204.22"
74 62 75 66 2E 63 30 3A 32 30 34 2E 34 2D 32 30 34 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:204.4-204.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 32 32 2E 31 33 2D 32 32 32 2E 32 33 00  # "tbuf.c0:222.13-222.23"
74 62 75 66 2E 63 30 3A 32 32 32 2E 34 2D 32 32 32 2E 32 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:222.4-222.24: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 32 32 35 2E 37 2D 32 32 35 2E 33 34 00  # "tbuf.c0:225.7-225.34"
74 62 75 66 2E 63 30 3A 32 32 36 2E 35 2D 32 32 36 2E 32 31 00  # "tbuf.c0:226.5-226.21"
74 62 75 66 2E 63 30 3A 32 32 37 2E 35 2D 32 32 37 2E 33 37 00  # "tbuf.c0:227.5-227.37"
74 62 75 66 2E 63 30 3A 32 32 33 2E 31 32 2D 32 32 33 2E 32 32 00  # "tbuf.c0:223.12-223.22"
74 62 75 66 2E 63 30 3A 32 32 33 2E 34 2D 32 32 33 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:223.4-223.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 33 30 2E 33 2D 32 33 30 2E 33 35 00  # "tbuf.c0:230.3-230.35"
74 62 75 66 2E 63 30 3A 32 32 33 2E 31 32 2D 32 32 33 2E 32 32 00  # "tbuf.c0:223.12-223.22"
74 62 75 66 2E 63 30 3A 32 32 33 2E 34 2D 32 32 33 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:223.4-223.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 32 33 2E 31 32 2D 32 32 33 2E 32 32 00  # "tbuf.c0:223.12-223.22"
74 62 75 66 2E 63 30 3A 32 32 33 2E 34 2D 32 32 33 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:223.4-223.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 33 36 2E 31 33 2D 32 33 36 2E 32 33 00  # "tbuf.c0:236.13-236.23"
74 62 75 66 2E 63 30 3A 32 33 36 2E 34 2D 32 33 36 2E 32 34 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "tbuf.c0:236.4-236.24: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
74 62 75 66 2E 63 30 3A 32 33 39 2E 37 2D 32 33 39 2E 33 37 00  # "tbuf.c0:239.7-239.37"
74 62 75 66 2E 63 30 3A 32 33 39 2E 34 31 2D 32 33 39 2E 35 38 00  # "tbuf.c0:239.41-239.58"
74 62 75 66 2E 63 30 3A 32 33 37 2E 31 32 2D 32 33 37 2E 32 32 00  # "tbuf.c0:237.12-237.22"
74 62 75 66 2E 63 30 3A 32 33 37 2E 34 2D 32 33 37 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:237.4-237.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 34 30 2E 37 2D 32 34 30 2E 33 37 00  # "tbuf.c0:240.7-240.37"
74 62 75 66 2E 63 30 3A 32 34 33 2E 33 2D 32 34 33 2E 33 32 00  # "tbuf.c0:243.3-243.32"
74 62 75 66 2E 63 30 3A 32 34 34 2E 37 2D 32 34 34 2E 33 35 00  # "tbuf.c0:244.7-244.35"
74 62 75 66 2E 63 30 3A 32 34 35 2E 31 31 2D 32 34 35 2E 32 38 00  # "tbuf.c0:245.11-245.28"
74 62 75 66 2E 63 30 3A 32 34 35 2E 33 32 2D 32 34 35 2E 35 30 00  # "tbuf.c0:245.32-245.50"
74 62 75 66 2E 63 30 3A 32 34 36 2E 37 2D 32 34 36 2E 32 33 00  # "tbuf.c0:246.7-246.23"
74 62 75 66 2E 63 30 3A 32 33 37 2E 31 32 2D 32 33 37 2E 32 32 00  # "tbuf.c0:237.12-237.22"
74 62 75 66 2E 63 30 3A 32 33 37 2E 34 2D 32 33 37 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:237.4-237.23: @ensures annotation failed"
74 62 75 66 2E 63 30 3A 32 33 37 2E 31 32 2D 32 33 37 2E 32 32 00  # "tbuf.c0:237.12-237.22"
74 62 75 66 2E 63 30 3A 32 33 37 2E 34 2D 32 33 37 2E 32 33 3A 20 40 65 6E 73 75 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 00  # "tbuf.c0:237.4-237.23: @ensures annotation failed"
2F 61 66 73 2F 61 6E 64 72 65 77 2F 63 6F 75 72 73 65 2F 31 35 2F 31 32 32 2F 6C 69 62 2F 63 6F 6E 69 6F 2E 68 30 3A 31 34 2E 36 2D 31 34 2E 32 32 3A 20 40 72 65 71 75 69 72 65 73 20 61 6E 6E 6F 74 61 74 69 6F 6E 20 66 61 69 6C 65 64 0A 00  # "/afs/andrew/course/15/122/lib/conio.h0:14.6-14.22: @requires annotation failed\n"
3A 20 63 61 6C 6C 65 72 20 6C 6F 63 61 74 69 6F 6E 00  # ": caller location"
53 54 41 52 54 00  # "START"
20 3C 2D 2D 3E 20 00  # " <--> "
5F 00  # "_"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 33 30 2E 32 32 2D 33 30 2E 34 37 00  # "tbuf-test.c0:30.22-30.47"
5F 00  # "_"
20 3C 2D 2D 3E 20 45 4E 44 00  # " <--> END"
3C 3D 20 3A 20 00  # "<= : "
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 33 39 2E 35 2D 33 39 2E 32 31 00  # "tbuf-test.c0:39.5-39.21"
3D 3E 20 3A 20 00  # "=> : "
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 34 32 2E 35 2D 34 32 2E 32 30 00  # "tbuf-test.c0:42.5-42.20"
64 65 6C 3A 20 00  # "del: "
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 34 35 2E 35 2D 34 35 2E 31 39 00  # "tbuf-test.c0:45.5-45.19"
27 00  # "\'"
27 3A 20 00  # "\': "
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 34 38 2E 35 2D 34 38 2E 32 32 00  # "tbuf-test.c0:48.5-48.22"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 35 36 2E 32 31 2D 35 36 2E 34 30 00  # "tbuf-test.c0:56.21-56.40"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 35 36 2E 35 2D 35 36 2E 34 31 00  # "tbuf-test.c0:56.5-56.41"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 35 37 2E 35 2D 35 37 2E 32 31 00  # "tbuf-test.c0:57.5-57.21"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 36 34 2E 31 33 2D 36 34 2E 32 33 00  # "tbuf-test.c0:64.13-64.23"
56 69 73 75 61 6C 69 7A 69 6E 67 20 74 65 78 74 20 62 75 66 66 65 72 73 3A 00  # "Visualizing text buffers:"
20 64 6F 75 62 6C 79 20 6C 69 6E 6B 65 64 20 6C 69 73 74 73 20 6F 66 20 31 36 2D 65 6C 65 6D 65 6E 74 20 67 61 70 20 62 75 66 66 65 72 73 2E 00  # " doubly linked lists of 16-element gap buffers."
54 68 65 20 27 3C 27 20 63 68 61 72 61 63 74 65 72 20 6D 69 6D 69 63 73 20 67 6F 69 6E 67 20 62 61 63 6B 77 61 72 64 73 20 28 6C 65 66 74 20 61 72 72 6F 77 20 6B 65 79 29 00  # "The \'<\' character mimics going backwards (left arrow key)"
54 68 65 20 27 3E 27 20 63 68 61 72 61 63 74 65 72 20 6D 69 6D 69 63 73 20 67 6F 69 6E 67 20 66 6F 72 77 61 72 64 73 20 28 72 69 67 68 74 20 61 72 72 6F 77 20 6B 65 79 29 00  # "The \'>\' character mimics going forwards (right arrow key)"
54 68 65 20 27 5E 27 20 63 68 61 72 61 63 74 65 72 20 6D 69 6D 69 63 73 20 64 65 6C 65 74 69 6F 6E 20 28 64 65 6C 65 74 65 20 6B 65 79 29 00  # "The \'^\' character mimics deletion (delete key)"
41 6C 6C 20 6F 74 68 65 72 20 63 68 61 72 61 63 74 65 72 73 20 6A 75 73 74 20 69 6E 73 65 72 74 20 74 68 61 74 20 63 68 61 72 61 63 74 65 72 00  # "All other characters just insert that character"
00  # ""
47 69 76 65 20 69 6E 69 74 69 61 6C 20 69 6E 70 75 74 20 28 65 6D 70 74 79 20 6C 69 6E 65 20 71 75 69 74 73 29 3A 00  # "Give initial input (empty line quits):"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 37 34 2E 31 34 2D 37 34 2E 32 34 00  # "tbuf-test.c0:74.14-74.24"
00  # ""
20 20 20 20 20 00  # "     "
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 37 38 2E 35 2D 37 38 2E 32 31 00  # "tbuf-test.c0:78.5-78.21"
00  # ""
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 38 30 2E 35 2D 38 30 2E 32 35 00  # "tbuf-test.c0:80.5-80.25"
44 6F 6E 65 2E 20 4D 6F 72 65 20 69 6E 70 75 74 3F 20 28 65 6D 70 74 79 20 6C 69 6E 65 20 71 75 69 74 73 29 3A 00  # "Done. More input\? (empty line quits):"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 38 32 2E 39 2D 38 32 2E 31 39 00  # "tbuf-test.c0:82.9-82.19"
28 6E 6F 6E 65 29 00  # "(none)"
74 62 75 66 2D 74 65 73 74 2E 63 30 3A 38 37 2E 33 2D 38 37 2E 39 00  # "tbuf-test.c0:87.3-87.9"
47 6F 6F 64 62 79 65 00  # "Goodbye"

00 2F             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 09             # number of local variables = 9
00 1A             # code length = 26 bytes
14 21 28 # aldc 8488       # s[8488] = "(none)"
36 00    # vstore 0        # _caller = "(none)";
14 21 2F # aldc 8495       # s[8495] = "tbuf-test.c0:87.3-87.9"
B8 00 2E # invokestatic 46 # test("tbuf-test.c0:87.3-87.9")
57       # pop             # (ignore result)
14 21 46 # aldc 8518       # s[8518] = "Goodbye"
B7 00 0F # invokenative 15 # println("Goodbye")
57       # pop             # (ignore result)
10 00    # bipush 0        # 0
36 01    # vstore 1        # _result = 0;
15 01    # vload 1         # _result
B0       # return          # 


#<string_charat__1>
00 03             # number of arguments = 3
00 04             # number of local variables = 4
00 3E             # code length = 62 bytes
10 00    # bipush 0        # 0
15 01    # vload 1         # idx
A4 00 06 # if_icmple +6    # if (0 <= idx) goto <00:cond_true>
A7 00 1A # goto +26        # goto <01:cond_false>
# <00:cond_true>
15 01    # vload 1         # idx
15 00    # vload 0         # s
B7 00 00 # invokenative 0  # string_length(s)
A1 00 06 # if_icmplt +6    # if (idx < string_length(s)) goto <03:cond_true>
A7 00 08 # goto +8         # goto <04:cond_false>
# <03:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <05:cond_end>
# <04:cond_false>
10 00    # bipush 0        # false
# <05:cond_end>
A7 00 05 # goto +5         # goto <02:cond_end>
# <01:cond_false>
10 00    # bipush 0        # false
# <02:cond_end>
14 00 00 # aldc 0          # s[0] = "/afs/andrew/course/15/122/lib/string.h0:19.6-19.50: @requires annotation failed\n"
15 02    # vload 2         # _caller
14 00 51 # aldc 81         # s[81] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:19.6-19.50: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert((0 <= idx) && (idx < string_length(s))) [failure message on stack]
15 00    # vload 0         # s
15 01    # vload 1         # idx
B7 00 02 # invokenative 2  # string_charat(s, idx)
36 03    # vstore 3        # _result = string_charat(s, idx);
15 03    # vload 3         # _result
B0       # return          # 


#<string_join__1>
00 03             # number of arguments = 3
00 04             # number of local variables = 4
00 2D             # code length = 45 bytes
15 00    # vload 0         # a
15 01    # vload 1         # b
B7 00 01 # invokenative 1  # string_join(a, b)
36 03    # vstore 3        # _result = string_join(a, b);
15 03    # vload 3         # _result
B7 00 00 # invokenative 0  # string_length(_result)
15 00    # vload 0         # a
B7 00 00 # invokenative 0  # string_length(a)
15 01    # vload 1         # b
B7 00 00 # invokenative 0  # string_length(b)
60       # iadd            # (string_length(a) + string_length(b))
9F 00 06 # if_cmpeq +6     # if (string_length(_result) == (string_length(a) + string_length(b))) goto <06:cond_true>
A7 00 08 # goto +8         # goto <07:cond_false>
# <06:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <08:cond_end>
# <07:cond_false>
10 00    # bipush 0        # false
# <08:cond_end>
14 00 63 # aldc 99         # s[99] = "/afs/andrew/course/15/122/lib/string.h0:23.6-24.55: @ensures annotation failed"
CF       # assert          # assert(string_length(_result) == (string_length(a) + string_length(b))) [failure message on stack]
15 03    # vload 3         # _result
B0       # return          # 


#<string_sub__1>
00 04             # number of arguments = 4
00 05             # number of local variables = 5
00 65             # code length = 101 bytes
10 00    # bipush 0        # 0
15 01    # vload 1         # start
A4 00 06 # if_icmple +6    # if (0 <= start) goto <12:and>
A7 00 24 # goto +36        # goto <10:cond_false>
# <12:and>
15 01    # vload 1         # start
15 02    # vload 2         # end
A4 00 06 # if_icmple +6    # if (start <= end) goto <09:cond_true>
A7 00 1A # goto +26        # goto <10:cond_false>
# <09:cond_true>
15 02    # vload 2         # end
15 00    # vload 0         # a
B7 00 00 # invokenative 0  # string_length(a)
A4 00 06 # if_icmple +6    # if (end <= string_length(a)) goto <13:cond_true>
A7 00 08 # goto +8         # goto <14:cond_false>
# <13:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <15:cond_end>
# <14:cond_false>
10 00    # bipush 0        # false
# <15:cond_end>
A7 00 05 # goto +5         # goto <11:cond_end>
# <10:cond_false>
10 00    # bipush 0        # false
# <11:cond_end>
14 00 B2 # aldc 178        # s[178] = "/afs/andrew/course/15/122/lib/string.h0:31.6-31.69: @requires annotation failed\n"
15 03    # vload 3         # _caller
14 01 03 # aldc 259        # s[259] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:31.6-31.69: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert(((0 <= start) && (start <= end)) && (end <= string_length(a))) [failure message on stack]
15 00    # vload 0         # a
15 01    # vload 1         # start
15 02    # vload 2         # end
B7 00 03 # invokenative 3  # string_sub(a, start, end)
36 04    # vstore 4        # _result = string_sub(a, start, end);
15 04    # vload 4         # _result
B7 00 00 # invokenative 0  # string_length(_result)
15 02    # vload 2         # end
15 01    # vload 1         # start
64       # isub            # (end - start)
9F 00 06 # if_cmpeq +6     # if (string_length(_result) == (end - start)) goto <16:cond_true>
A7 00 08 # goto +8         # goto <17:cond_false>
# <16:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <18:cond_end>
# <17:cond_false>
10 00    # bipush 0        # false
# <18:cond_end>
14 01 15 # aldc 277        # s[277] = "/afs/andrew/course/15/122/lib/string.h0:32.6-32.52: @ensures annotation failed"
CF       # assert          # assert(string_length(_result) == (end - start)) [failure message on stack]
15 04    # vload 4         # _result
B0       # return          # 


#<string_compare__1>
00 03             # number of arguments = 3
00 05             # number of local variables = 5
00 30             # code length = 48 bytes
15 00    # vload 0         # a
15 01    # vload 1         # b
B7 00 04 # invokenative 4  # string_compare(a, b)
36 03    # vstore 3        # _result = string_compare(a, b);
10 FF    # bipush -1       # -1
15 03    # vload 3         # _result
A4 00 06 # if_icmple +6    # if (-(1) <= _result) goto <19:cond_true>
A7 00 17 # goto +23        # goto <20:cond_false>
# <19:cond_true>
15 03    # vload 3         # _result
10 01    # bipush 1        # 1
A4 00 06 # if_icmple +6    # if (_result <= 1) goto <22:cond_true>
A7 00 08 # goto +8         # goto <23:cond_false>
# <22:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <24:cond_end>
# <23:cond_false>
10 00    # bipush 0        # false
# <24:cond_end>
A7 00 05 # goto +5         # goto <21:cond_end>
# <20:cond_false>
10 00    # bipush 0        # false
# <21:cond_end>
14 01 64 # aldc 356        # s[356] = "/afs/andrew/course/15/122/lib/string.h0:37.6-37.44: @ensures annotation failed"
CF       # assert          # assert((-(1) <= _result) && (_result <= 1)) [failure message on stack]
15 03    # vload 3         # _result
B0       # return          # 


#<string_fromchar__1>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 5F             # code length = 95 bytes
15 00    # vload 0         # c
10 00    # bipush 0        # '\000'
A0 00 06 # if_cmpne +6     # if (c != '\0') goto <25:cond_true>
A7 00 08 # goto +8         # goto <26:cond_false>
# <25:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <27:cond_end>
# <26:cond_false>
10 00    # bipush 0        # false
# <27:cond_end>
14 01 B3 # aldc 435        # s[435] = "/afs/andrew/course/15/122/lib/string.h0:43.6-43.25: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 02 04 # aldc 516        # s[516] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:43.6-43.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert(c != '\0') [failure message on stack]
15 00    # vload 0         # c
B7 00 05 # invokenative 5  # string_fromchar(c)
36 02    # vstore 2        # _result = string_fromchar(c);
15 02    # vload 2         # _result
B7 00 00 # invokenative 0  # string_length(_result)
10 01    # bipush 1        # 1
9F 00 06 # if_cmpeq +6     # if (string_length(_result) == 1) goto <28:cond_true>
A7 00 08 # goto +8         # goto <29:cond_false>
# <28:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <30:cond_end>
# <29:cond_false>
10 00    # bipush 0        # false
# <30:cond_end>
14 02 16 # aldc 534        # s[534] = "/afs/andrew/course/15/122/lib/string.h0:44.6-44.42: @ensures annotation failed"
CF       # assert          # assert(string_length(_result) == 1) [failure message on stack]
15 02    # vload 2         # _result
10 00    # bipush 0        # 0
14 02 65 # aldc 613        # s[613] = "/afs/andrew/course/15/122/lib/string.h0:45.14-45.39"
B8 00 01 # invokestatic 1  # string_charat__1(_result, 0, "/afs/andrew/course/15/122/lib/string.h0:45.14-45.39")
15 00    # vload 0         # c
9F 00 06 # if_cmpeq +6     # if (string_charat__1(_result, 0, "/afs/andrew/course/15/122/lib/string.h0:45.14-45.39") == c) goto <31:cond_true>
A7 00 08 # goto +8         # goto <32:cond_false>
# <31:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <33:cond_end>
# <32:cond_false>
10 00    # bipush 0        # false
# <33:cond_end>
14 02 99 # aldc 665        # s[665] = "/afs/andrew/course/15/122/lib/string.h0:45.6-45.45: @ensures annotation failed"
CF       # assert          # assert(string_charat__1(_result, 0, "/afs/andrew/course/15/122/lib/string.h0:45.14-45.39") == c) [failure message on stack]
15 02    # vload 2         # _result
B0       # return          # 


#<string_terminated__1>
00 03             # number of arguments = 3
00 05             # number of local variables = 5
00 3C             # code length = 60 bytes
10 00    # bipush 0        # 0
15 01    # vload 1         # n
A4 00 06 # if_icmple +6    # if (0 <= n) goto <34:cond_true>
A7 00 18 # goto +24        # goto <35:cond_false>
# <34:cond_true>
15 01    # vload 1         # n
15 00    # vload 0         # A
BE       # arraylength     # \length(A)
A4 00 06 # if_icmple +6    # if (n <= \length(A)) goto <37:cond_true>
A7 00 08 # goto +8         # goto <38:cond_false>
# <37:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <39:cond_end>
# <38:cond_false>
10 00    # bipush 0        # false
# <39:cond_end>
A7 00 05 # goto +5         # goto <36:cond_end>
# <35:cond_false>
10 00    # bipush 0        # false
# <36:cond_end>
14 02 E8 # aldc 744        # s[744] = "/afs/andrew/course/15/122/lib/string.h0:52.6-52.41: @requires annotation failed\n"
15 02    # vload 2         # _caller
14 03 39 # aldc 825        # s[825] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:52.6-52.41: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert((0 <= n) && (n <= \length(A))) [failure message on stack]
15 00    # vload 0         # A
15 01    # vload 1         # n
B7 00 06 # invokenative 6  # string_terminated(A, n)
36 03    # vstore 3        # _result = string_terminated(A, n);
15 03    # vload 3         # _result
B0       # return          # 


#<string_to_chararray__1>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 3A             # code length = 58 bytes
15 00    # vload 0         # s
B7 00 07 # invokenative 7  # string_to_chararray(s)
36 02    # vstore 2        # _result = string_to_chararray(s);
15 02    # vload 2         # _result
BE       # arraylength     # \length(_result)
15 00    # vload 0         # s
B7 00 00 # invokenative 0  # string_length(s)
10 01    # bipush 1        # 1
60       # iadd            # (string_length(s) + 1)
A2 00 06 # if_icmpge +6    # if (\length(_result) >= (string_length(s) + 1)) goto <40:cond_true>
A7 00 08 # goto +8         # goto <41:cond_false>
# <40:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <42:cond_end>
# <41:cond_false>
10 00    # bipush 0        # false
# <42:cond_end>
14 03 4B # aldc 843        # s[843] = "/afs/andrew/course/15/122/lib/string.h0:56.6-56.55: @ensures annotation failed"
CF       # assert          # assert(\length(_result) >= (string_length(s) + 1)) [failure message on stack]
15 02    # vload 2         # _result
15 00    # vload 0         # s
B7 00 00 # invokenative 0  # string_length(s)
10 01    # bipush 1        # 1
60       # iadd            # (string_length(s) + 1)
14 03 9A # aldc 922        # s[922] = "/afs/andrew/course/15/122/lib/string.h0:57.14-57.62"
B8 00 06 # invokestatic 6  # string_terminated__1(_result, (string_length(s) + 1), "/afs/andrew/course/15/122/lib/string.h0:57.14-57.62")
14 03 CE # aldc 974        # s[974] = "/afs/andrew/course/15/122/lib/string.h0:57.6-57.63: @ensures annotation failed"
CF       # assert          # assertstring_terminated__1(_result, (string_length(s) + 1), "/afs/andrew/course/15/122/lib/string.h0:57.14-57.62") [failure message on stack]
15 02    # vload 2         # _result
B0       # return          # 


#<string_from_chararray__1>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 40             # code length = 64 bytes
15 00    # vload 0         # A
15 00    # vload 0         # A
BE       # arraylength     # \length(A)
14 04 1D # aldc 1053       # s[1053] = "/afs/andrew/course/15/122/lib/string.h0:62.15-62.47"
B8 00 06 # invokestatic 6  # string_terminated__1(A, \length(A), "/afs/andrew/course/15/122/lib/string.h0:62.15-62.47")
14 04 51 # aldc 1105       # s[1105] = "/afs/andrew/course/15/122/lib/string.h0:62.6-62.48: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 04 A2 # aldc 1186       # s[1186] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:62.6-62.48: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertstring_terminated__1(A, \length(A), "/afs/andrew/course/15/122/lib/string.h0:62.15-62.47") [failure message on stack]
15 00    # vload 0         # A
B7 00 08 # invokenative 8  # string_from_chararray(A)
36 02    # vstore 2        # _result = string_from_chararray(A);
15 02    # vload 2         # _result
B7 00 00 # invokenative 0  # string_length(_result)
10 01    # bipush 1        # 1
60       # iadd            # (string_length(_result) + 1)
15 00    # vload 0         # A
BE       # arraylength     # \length(A)
A4 00 06 # if_icmple +6    # if ((string_length(_result) + 1) <= \length(A)) goto <43:cond_true>
A7 00 08 # goto +8         # goto <44:cond_false>
# <43:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <45:cond_end>
# <44:cond_false>
10 00    # bipush 0        # false
# <45:cond_end>
14 04 B4 # aldc 1204       # s[1204] = "/afs/andrew/course/15/122/lib/string.h0:63.6-63.55: @ensures annotation failed"
CF       # assert          # assert((string_length(_result) + 1) <= \length(A)) [failure message on stack]
15 02    # vload 2         # _result
B0       # return          # 


#<char_ord__1>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 2E             # code length = 46 bytes
15 00    # vload 0         # c
B7 00 09 # invokenative 9  # char_ord(c)
36 02    # vstore 2        # _result = char_ord(c);
10 00    # bipush 0        # 0
15 02    # vload 2         # _result
A4 00 06 # if_icmple +6    # if (0 <= _result) goto <46:cond_true>
A7 00 17 # goto +23        # goto <47:cond_false>
# <46:cond_true>
15 02    # vload 2         # _result
10 7F    # bipush 127      # 127
A4 00 06 # if_icmple +6    # if (_result <= 127) goto <49:cond_true>
A7 00 08 # goto +8         # goto <50:cond_false>
# <49:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <51:cond_end>
# <50:cond_false>
10 00    # bipush 0        # false
# <51:cond_end>
A7 00 05 # goto +5         # goto <48:cond_end>
# <47:cond_false>
10 00    # bipush 0        # false
# <48:cond_end>
14 05 03 # aldc 1283       # s[1283] = "/afs/andrew/course/15/122/lib/string.h0:67.6-67.45: @ensures annotation failed"
CF       # assert          # assert((0 <= _result) && (_result <= 127)) [failure message on stack]
15 02    # vload 2         # _result
B0       # return          # 


#<char_chr__1>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 39             # code length = 57 bytes
10 00    # bipush 0        # 0
15 00    # vload 0         # n
A4 00 06 # if_icmple +6    # if (0 <= n) goto <52:cond_true>
A7 00 17 # goto +23        # goto <53:cond_false>
# <52:cond_true>
15 00    # vload 0         # n
10 7F    # bipush 127      # 127
A4 00 06 # if_icmple +6    # if (n <= 127) goto <55:cond_true>
A7 00 08 # goto +8         # goto <56:cond_false>
# <55:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <57:cond_end>
# <56:cond_false>
10 00    # bipush 0        # false
# <57:cond_end>
A7 00 05 # goto +5         # goto <54:cond_end>
# <53:cond_false>
10 00    # bipush 0        # false
# <54:cond_end>
14 05 52 # aldc 1362       # s[1362] = "/afs/andrew/course/15/122/lib/string.h0:69.6-69.34: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 05 A3 # aldc 1443       # s[1443] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/string.h0:69.6-69.34: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert((0 <= n) && (n <= 127)) [failure message on stack]
15 00    # vload 0         # n
B7 00 0A # invokenative 10 # char_chr(n)
36 02    # vstore 2        # _result = char_chr(n);
15 02    # vload 2         # _result
B0       # return          # 


#<is_gapbuf>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 6C             # code length = 108 bytes
15 00    # vload 0         # G
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (G != NULL) goto <67:and>
A7 00 5F # goto +95        # goto <62:cond_false>
# <67:and>
10 00    # bipush 0        # 0
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
A1 00 06 # if_icmplt +6    # if (0 < G->limit) goto <66:and>
A7 00 52 # goto +82        # goto <62:cond_false>
# <66:and>
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
14 05 E5 # aldc 1509       # s[1509] = "gapbuf.c0:57.6-57.51"
B8 00 15 # invokestatic 21 # is_array_expected_length(G->buffer, G->limit, "gapbuf.c0:57.6-57.51")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (is_array_expected_length(G->buffer, G->limit, "gapbuf.c0:57.6-57.51") == true) goto <65:and>
A7 00 3A # goto +58        # goto <62:cond_false>
# <65:and>
10 00    # bipush 0        # 0
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
A4 00 06 # if_icmple +6    # if (0 <= G->gap_start) goto <64:and>
A7 00 2D # goto +45        # goto <62:cond_false>
# <64:and>
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
A4 00 06 # if_icmple +6    # if (G->gap_start <= G->gap_end) goto <61:cond_true>
A7 00 1D # goto +29        # goto <62:cond_false>
# <61:cond_true>
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
A4 00 06 # if_icmple +6    # if (G->gap_end <= G->limit) goto <68:cond_true>
A7 00 08 # goto +8         # goto <69:cond_false>
# <68:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <70:cond_end>
# <69:cond_false>
10 00    # bipush 0        # false
# <70:cond_end>
A7 00 05 # goto +5         # goto <63:cond_end>
# <62:cond_false>
10 00    # bipush 0        # false
# <63:cond_end>
36 02    # vstore 2        # _result = ((((((G != NULL) && (0 < G->limit)) && is_array_expected_length(G->buffer, G->limit, "gapbuf.c0:57.6-57.51")) && (0 <= G->gap_start)) && (G->gap_start <= G->gap_end)) && (G->gap_end <= G->limit));
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_empty>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 45             # code length = 69 bytes
15 00    # vload 0         # G
14 05 FA # aldc 1530       # s[1530] = "gapbuf.c0:65.13-65.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:65.13-65.25")
14 06 10 # aldc 1552       # s[1552] = "gapbuf.c0:65.4-65.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 06 43 # aldc 1603       # s[1603] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:65.4-65.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:65.13-65.25") [failure message on stack]
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (G->gap_start == 0) goto <71:cond_true>
A7 00 1D # goto +29        # goto <72:cond_false>
# <71:cond_true>
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
9F 00 06 # if_cmpeq +6     # if (G->gap_end == G->limit) goto <74:cond_true>
A7 00 08 # goto +8         # goto <75:cond_false>
# <74:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <76:cond_end>
# <75:cond_false>
10 00    # bipush 0        # false
# <76:cond_end>
A7 00 05 # goto +5         # goto <73:cond_end>
# <72:cond_false>
10 00    # bipush 0        # false
# <73:cond_end>
36 02    # vstore 2        # _result = ((G->gap_start == 0) && (G->gap_end == G->limit));
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_full>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 33             # code length = 51 bytes
15 00    # vload 0         # G
14 06 55 # aldc 1621       # s[1621] = "gapbuf.c0:73.13-73.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:73.13-73.25")
14 06 6B # aldc 1643       # s[1643] = "gapbuf.c0:73.4-73.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 06 9E # aldc 1694       # s[1694] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:73.4-73.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:73.13-73.25") [failure message on stack]
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
9F 00 06 # if_cmpeq +6     # if (G->gap_start == G->gap_end) goto <77:cond_true>
A7 00 08 # goto +8         # goto <78:cond_false>
# <77:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <79:cond_end>
# <78:cond_false>
10 00    # bipush 0        # false
# <79:cond_end>
36 02    # vstore 2        # _result = (G->gap_start == G->gap_end);
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_at_left>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 30             # code length = 48 bytes
15 00    # vload 0         # G
14 06 B0 # aldc 1712       # s[1712] = "gapbuf.c0:81.13-81.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:81.13-81.25")
14 06 C6 # aldc 1734       # s[1734] = "gapbuf.c0:81.4-81.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 06 F9 # aldc 1785       # s[1785] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:81.4-81.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:81.13-81.25") [failure message on stack]
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
10 00    # bipush 0        # 0
9F 00 06 # if_cmpeq +6     # if (G->gap_start == 0) goto <80:cond_true>
A7 00 08 # goto +8         # goto <81:cond_false>
# <80:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <82:cond_end>
# <81:cond_false>
10 00    # bipush 0        # false
# <82:cond_end>
36 02    # vstore 2        # _result = (G->gap_start == 0);
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_at_right>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 33             # code length = 51 bytes
15 00    # vload 0         # G
14 07 0B # aldc 1803       # s[1803] = "gapbuf.c0:89.13-89.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:89.13-89.25")
14 07 21 # aldc 1825       # s[1825] = "gapbuf.c0:89.4-89.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 07 54 # aldc 1876       # s[1876] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:89.4-89.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:89.13-89.25") [failure message on stack]
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
9F 00 06 # if_cmpeq +6     # if (G->gap_end == G->limit) goto <83:cond_true>
A7 00 08 # goto +8         # goto <84:cond_false>
# <83:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <85:cond_end>
# <84:cond_false>
10 00    # bipush 0        # false
# <85:cond_end>
36 02    # vstore 2        # _result = (G->gap_end == G->limit);
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_new>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 88             # code length = 136 bytes
15 00    # vload 0         # limit
10 00    # bipush 0        # 0
A3 00 06 # if_icmpgt +6    # if (limit > 0) goto <86:cond_true>
A7 00 08 # goto +8         # goto <87:cond_false>
# <86:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <88:cond_end>
# <87:cond_false>
10 00    # bipush 0        # false
# <88:cond_end>
14 07 66 # aldc 1894       # s[1894] = "gapbuf.c0:96.4-96.23: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 07 99 # aldc 1945       # s[1945] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:96.4-96.23: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert(limit > 0) [failure message on stack]
BB 18    # new 24          # alloc(gapbuf)
36 03    # vstore 3        # G = alloc(gapbuf);
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->limit
15 00    # vload 0         # limit
4E       # imstore         # G->limit = limit;
15 03    # vload 3         # G
62 10    # aaddf 16        # &G->gap_start
10 00    # bipush 0        # 0
4E       # imstore         # G->gap_start = 0;
15 03    # vload 3         # G
62 14    # aaddf 20        # &G->gap_end
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
4E       # imstore         # G->gap_end = G->limit;
15 03    # vload 3         # G
62 08    # aaddf 8         # &G->buffer
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
BC 01    # newarray 1      # alloc_array(char, G->limit)
4F       # amstore         # G->buffer = alloc_array(char, G->limit);
15 03    # vload 3         # G
36 02    # vstore 2        # _result = G;
15 02    # vload 2         # _result
14 07 AB # aldc 1963       # s[1963] = "gapbuf.c0:97.12-97.30"
B8 00 0B # invokestatic 11 # is_gapbuf(_result, "gapbuf.c0:97.12-97.30")
14 07 C1 # aldc 1985       # s[1985] = "gapbuf.c0:97.4-97.31: @ensures annotation failed"
CF       # assert          # assertis_gapbuf(_result, "gapbuf.c0:97.12-97.30") [failure message on stack]
15 02    # vload 2         # _result
14 07 F2 # aldc 2034       # s[2034] = "gapbuf.c0:98.12-98.33"
B8 00 0C # invokestatic 12 # gapbuf_empty(_result, "gapbuf.c0:98.12-98.33")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_empty(_result, "gapbuf.c0:98.12-98.33") == true) goto <89:cond_true>
A7 00 1A # goto +26        # goto <90:cond_false>
# <89:cond_true>
15 02    # vload 2         # _result
62 00    # aaddf 0         # &_result->limit
2E       # imload          # _result->limit
15 00    # vload 0         # limit
9F 00 06 # if_cmpeq +6     # if (_result->limit == limit) goto <92:cond_true>
A7 00 08 # goto +8         # goto <93:cond_false>
# <92:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <94:cond_end>
# <93:cond_false>
10 00    # bipush 0        # false
# <94:cond_end>
A7 00 05 # goto +5         # goto <91:cond_end>
# <90:cond_false>
10 00    # bipush 0        # false
# <91:cond_end>
14 08 08 # aldc 2056       # s[2056] = "gapbuf.c0:98.4-98.61: @ensures annotation failed"
CF       # assert          # assert(gapbuf_empty(_result, "gapbuf.c0:98.12-98.33") && (_result->limit == limit)) [failure message on stack]
15 02    # vload 2         # _result
B0       # return          # 


#<gapbuf_forward>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 6C             # code length = 108 bytes
15 00    # vload 0         # G
14 08 39 # aldc 2105       # s[2105] = "gapbuf.c0:110.13-110.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:110.13-110.25")
14 08 51 # aldc 2129       # s[2129] = "gapbuf.c0:110.4-110.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 08 86 # aldc 2182       # s[2182] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:110.4-110.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:110.13-110.25") [failure message on stack]
15 00    # vload 0         # G
14 08 98 # aldc 2200       # s[2200] = "gapbuf.c0:111.14-111.32"
B8 00 0F # invokestatic 15 # gapbuf_at_right(G, "gapbuf.c0:111.14-111.32")
10 01    # bipush 1        # 
82       # ixor            # !(gapbuf_at_right(G, "gapbuf.c0:111.14-111.32"))
14 08 B0 # aldc 2224       # s[2224] = "gapbuf.c0:111.4-111.33: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 08 E5 # aldc 2277       # s[2277] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:111.4-111.33: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(gapbuf_at_right(G, "gapbuf.c0:111.14-111.32")) [failure message on stack]
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
63       # aadds           # &G->buffer[G->gap_start]
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
63       # aadds           # &G->buffer[G->gap_end]
34       # cmload          # G->buffer[G->gap_end]
55       # cmstore         # G->buffer[G->gap_start] = G->buffer[G->gap_end];
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
59       # dup             # (save &G->gap_start)
2E       # imload          # G->gap_start
10 01    # bipush 1        # 1
60       # iadd            # 
4E       # imstore         # G->gap_start += 1;
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
59       # dup             # (save &G->gap_end)
2E       # imload          # G->gap_end
10 01    # bipush 1        # 1
60       # iadd            # 
4E       # imstore         # G->gap_end += 1;
15 00    # vload 0         # G
14 08 F7 # aldc 2295       # s[2295] = "gapbuf.c0:112.12-112.24"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:112.12-112.24")
14 09 0F # aldc 2319       # s[2319] = "gapbuf.c0:112.4-112.25: @ensures annotation failed"
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:112.12-112.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<gapbuf_backward>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 6C             # code length = 108 bytes
15 00    # vload 0         # G
14 09 42 # aldc 2370       # s[2370] = "gapbuf.c0:121.13-121.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:121.13-121.25")
14 09 5A # aldc 2394       # s[2394] = "gapbuf.c0:121.4-121.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 09 8F # aldc 2447       # s[2447] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:121.4-121.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:121.13-121.25") [failure message on stack]
15 00    # vload 0         # G
14 09 A1 # aldc 2465       # s[2465] = "gapbuf.c0:122.14-122.31"
B8 00 0E # invokestatic 14 # gapbuf_at_left(G, "gapbuf.c0:122.14-122.31")
10 01    # bipush 1        # 
82       # ixor            # !(gapbuf_at_left(G, "gapbuf.c0:122.14-122.31"))
14 09 B9 # aldc 2489       # s[2489] = "gapbuf.c0:122.4-122.32: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 09 EE # aldc 2542       # s[2542] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:122.4-122.32: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(gapbuf_at_left(G, "gapbuf.c0:122.14-122.31")) [failure message on stack]
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
59       # dup             # (save &G->gap_end)
2E       # imload          # G->gap_end
10 01    # bipush 1        # 1
64       # isub            # 
4E       # imstore         # G->gap_end -= 1;
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
59       # dup             # (save &G->gap_start)
2E       # imload          # G->gap_start
10 01    # bipush 1        # 1
64       # isub            # 
4E       # imstore         # G->gap_start -= 1;
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
63       # aadds           # &G->buffer[G->gap_end]
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
63       # aadds           # &G->buffer[G->gap_start]
34       # cmload          # G->buffer[G->gap_start]
55       # cmstore         # G->buffer[G->gap_end] = G->buffer[G->gap_start];
15 00    # vload 0         # G
14 0A 00 # aldc 2560       # s[2560] = "gapbuf.c0:123.12-123.24"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:123.12-123.24")
14 0A 18 # aldc 2584       # s[2584] = "gapbuf.c0:123.4-123.25: @ensures annotation failed"
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:123.12-123.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<gapbuf_insert>
00 03             # number of arguments = 3
00 05             # number of local variables = 5
00 58             # code length = 88 bytes
15 00    # vload 0         # G
14 0A 4B # aldc 2635       # s[2635] = "gapbuf.c0:134.13-134.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:134.13-134.25")
14 0A 63 # aldc 2659       # s[2659] = "gapbuf.c0:134.4-134.26: @requires annotation failed\n"
15 02    # vload 2         # _caller
14 0A 98 # aldc 2712       # s[2712] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:134.4-134.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:134.13-134.25") [failure message on stack]
15 00    # vload 0         # G
14 0A AA # aldc 2730       # s[2730] = "gapbuf.c0:135.14-135.28"
B8 00 0D # invokestatic 13 # gapbuf_full(G, "gapbuf.c0:135.14-135.28")
10 01    # bipush 1        # 
82       # ixor            # !(gapbuf_full(G, "gapbuf.c0:135.14-135.28"))
14 0A C2 # aldc 2754       # s[2754] = "gapbuf.c0:135.4-135.29: @requires annotation failed\n"
15 02    # vload 2         # _caller
14 0A F7 # aldc 2807       # s[2807] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:135.4-135.29: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(gapbuf_full(G, "gapbuf.c0:135.14-135.28")) [failure message on stack]
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
63       # aadds           # &G->buffer[G->gap_start]
15 01    # vload 1         # c
55       # cmstore         # G->buffer[G->gap_start] = c;
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
59       # dup             # (save &G->gap_start)
2E       # imload          # G->gap_start
10 01    # bipush 1        # 1
60       # iadd            # 
4E       # imstore         # G->gap_start += 1;
15 00    # vload 0         # G
14 0B 09 # aldc 2825       # s[2825] = "gapbuf.c0:136.12-136.24"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:136.12-136.24")
14 0B 21 # aldc 2849       # s[2849] = "gapbuf.c0:136.4-136.25: @ensures annotation failed"
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:136.12-136.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<gapbuf_delete>
00 02             # number of arguments = 2
00 05             # number of local variables = 5
00 4A             # code length = 74 bytes
15 00    # vload 0         # G
14 0B 54 # aldc 2900       # s[2900] = "gapbuf.c0:144.13-144.25"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:144.13-144.25")
14 0B 6C # aldc 2924       # s[2924] = "gapbuf.c0:144.4-144.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0B A1 # aldc 2977       # s[2977] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:144.4-144.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:144.13-144.25") [failure message on stack]
15 00    # vload 0         # G
14 0B B3 # aldc 2995       # s[2995] = "gapbuf.c0:145.14-145.29"
B8 00 0C # invokestatic 12 # gapbuf_empty(G, "gapbuf.c0:145.14-145.29")
10 01    # bipush 1        # 
82       # ixor            # !(gapbuf_empty(G, "gapbuf.c0:145.14-145.29"))
14 0B CB # aldc 3019       # s[3019] = "gapbuf.c0:145.4-145.30: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0C 00 # aldc 3072       # s[3072] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("gapbuf.c0:145.4-145.30: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(gapbuf_empty(G, "gapbuf.c0:145.14-145.29")) [failure message on stack]
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
59       # dup             # (save &G->gap_start)
2E       # imload          # G->gap_start
10 01    # bipush 1        # 1
64       # isub            # 
4E       # imstore         # G->gap_start -= 1;
15 00    # vload 0         # G
14 0C 12 # aldc 3090       # s[3090] = "gapbuf.c0:146.12-146.24"
B8 00 0B # invokestatic 11 # is_gapbuf(G, "gapbuf.c0:146.12-146.24")
14 0C 2A # aldc 3114       # s[3114] = "gapbuf.c0:146.4-146.25: @ensures annotation failed"
CF       # assert          # assertis_gapbuf(G, "gapbuf.c0:146.12-146.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<is_array_expected_length>
00 03             # number of arguments = 3
00 05             # number of local variables = 5
00 1D             # code length = 29 bytes
15 00    # vload 0         # A
BE       # arraylength     # \length(A)
15 01    # vload 1         # length
9F 00 06 # if_cmpeq +6     # if (\length(A) == length) goto <58:cond_true>
A7 00 08 # goto +8         # goto <59:cond_false>
# <58:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <60:cond_end>
# <59:cond_false>
10 00    # bipush 0        # false
# <60:cond_end>
14 05 B5 # aldc 1461       # s[1461] = "gapbuf.c0:47.6-47.34: @assert annotation failed"
CF       # assert          # assert(\length(A) == length) [failure message on stack]
10 01    # bipush 1        # true
36 03    # vstore 3        # _result = true;
15 03    # vload 3         # _result
B0       # return          # 


#<is_dll_pt>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 CD             # code length = 205 bytes
15 00    # vload 0         # B
01       # aconst_null     # NULL
9F 00 36 # if_cmpeq +54    # if (B == NULL) goto <119:then>
A7 00 03 # goto +3         # goto <124:or>
# <124:or>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
9F 00 26 # if_cmpeq +38    # if (B->start == B->point) goto <119:then>
A7 00 03 # goto +3         # goto <123:or>
# <123:or>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
9F 00 16 # if_cmpeq +22    # if (B->point == B->end) goto <119:then>
A7 00 03 # goto +3         # goto <122:or>
# <122:or>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
9F 00 06 # if_cmpeq +6     # if (B->start == B->end) goto <119:then>
A7 00 0D # goto +13        # goto <120:else>
# <119:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <121:endif>
# <120:else>
# <121:endif>
15 00    # vload 0         # B
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (B != NULL) goto <129:and>
A7 00 3D # goto +61        # goto <126:cond_false>
# <129:and>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
A0 00 06 # if_cmpne +6     # if (B->start != B->point) goto <128:and>
A7 00 2D # goto +45        # goto <126:cond_false>
# <128:and>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (B->point != B->end) goto <125:cond_true>
A7 00 1D # goto +29        # goto <126:cond_false>
# <125:cond_true>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (B->start != B->end) goto <130:cond_true>
A7 00 08 # goto +8         # goto <131:cond_false>
# <130:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <132:cond_end>
# <131:cond_false>
10 00    # bipush 0        # false
# <132:cond_end>
A7 00 05 # goto +5         # goto <127:cond_end>
# <126:cond_false>
10 00    # bipush 0        # false
# <127:cond_end>
14 0C 95 # aldc 3221       # s[3221] = "dll_pt.c0:65.3-68.35: assert failed"
CF       # assert          # assert((((B != NULL) && (B->start != B->point)) && (B->point != B->end)) && (B->start != B->end)) [failure message on stack]
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
14 0C B9 # aldc 3257       # s[3257] = "dll_pt.c0:69.8-69.42"
B8 00 1C # invokestatic 28 # is_dll_segment(B->start, B->point, "dll_pt.c0:69.8-69.42")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (is_dll_segment(B->start, B->point, "dll_pt.c0:69.8-69.42") == true) goto <136:or>
A7 00 1B # goto +27        # goto <133:then>
# <136:or>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
14 0C CE # aldc 3278       # s[3278] = "dll_pt.c0:70.8-70.40"
B8 00 1C # invokestatic 28 # is_dll_segment(B->point, B->end, "dll_pt.c0:70.8-70.40")
10 01    # bipush 1        # true
9F 00 10 # if_cmpeq +16    # if (is_dll_segment(B->point, B->end, "dll_pt.c0:70.8-70.40") == true) goto <134:else>
A7 00 03 # goto +3         # goto <133:then>
# <133:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <135:endif>
# <134:else>
# <135:endif>
10 01    # bipush 1        # true
36 02    # vstore 2        # _result = true;
15 02    # vload 2         # _result
B0       # return          # 


#<dll_pt_at_left>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 36             # code length = 54 bytes
15 00    # vload 0         # B
14 0C E3 # aldc 3299       # s[3299] = "dll_pt.c0:76.13-76.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:76.13-76.25")
14 0C F9 # aldc 3321       # s[3321] = "dll_pt.c0:76.4-76.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0D 2C # aldc 3372       # s[3372] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:76.4-76.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:76.13-76.25") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
9F 00 06 # if_cmpeq +6     # if (B->point->prev == B->start) goto <137:cond_true>
A7 00 08 # goto +8         # goto <138:cond_false>
# <137:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <139:cond_end>
# <138:cond_false>
10 00    # bipush 0        # false
# <139:cond_end>
36 02    # vstore 2        # _result = (B->point->prev == B->start);
15 02    # vload 2         # _result
B0       # return          # 


#<dll_pt_at_right>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 36             # code length = 54 bytes
15 00    # vload 0         # B
14 0D 3E # aldc 3390       # s[3390] = "dll_pt.c0:83.13-83.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:83.13-83.25")
14 0D 54 # aldc 3412       # s[3412] = "dll_pt.c0:83.4-83.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0D 87 # aldc 3463       # s[3463] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:83.4-83.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:83.13-83.25") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
9F 00 06 # if_cmpeq +6     # if (B->point->next == B->end) goto <140:cond_true>
A7 00 08 # goto +8         # goto <141:cond_false>
# <140:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <142:cond_end>
# <141:cond_false>
10 00    # bipush 0        # false
# <142:cond_end>
36 02    # vstore 2        # _result = (B->point->next == B->end);
15 02    # vload 2         # _result
B0       # return          # 


#<dll_pt_forward>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 4D             # code length = 77 bytes
15 00    # vload 0         # B
14 0D 99 # aldc 3481       # s[3481] = "dll_pt.c0:90.13-90.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:90.13-90.25")
14 0D AF # aldc 3503       # s[3503] = "dll_pt.c0:90.4-90.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0D E2 # aldc 3554       # s[3554] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:90.4-90.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:90.13-90.25") [failure message on stack]
15 00    # vload 0         # B
14 0D F4 # aldc 3572       # s[3572] = "dll_pt.c0:91.14-91.32"
B8 00 18 # invokestatic 24 # dll_pt_at_right(B, "dll_pt.c0:91.14-91.32")
10 01    # bipush 1        # 
82       # ixor            # !(dll_pt_at_right(B, "dll_pt.c0:91.14-91.32"))
14 0E 0A # aldc 3594       # s[3594] = "dll_pt.c0:91.4-91.33: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0E 3D # aldc 3645       # s[3645] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:91.4-91.33: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(dll_pt_at_right(B, "dll_pt.c0:91.14-91.32")) [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # B->point = B->point->next;
15 00    # vload 0         # B
14 0E 4F # aldc 3663       # s[3663] = "dll_pt.c0:92.12-92.24"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:92.12-92.24")
14 0E 65 # aldc 3685       # s[3685] = "dll_pt.c0:92.4-92.25: @ensures annotation failed"
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:92.12-92.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<dll_pt_backward>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 4D             # code length = 77 bytes
15 00    # vload 0         # B
14 0E 96 # aldc 3734       # s[3734] = "dll_pt.c0:99.13-99.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:99.13-99.25")
14 0E AC # aldc 3756       # s[3756] = "dll_pt.c0:99.4-99.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0E DF # aldc 3807       # s[3807] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:99.4-99.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:99.13-99.25") [failure message on stack]
15 00    # vload 0         # B
14 0E F1 # aldc 3825       # s[3825] = "dll_pt.c0:100.14-100.31"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "dll_pt.c0:100.14-100.31")
10 01    # bipush 1        # 
82       # ixor            # !(dll_pt_at_left(B, "dll_pt.c0:100.14-100.31"))
14 0F 09 # aldc 3849       # s[3849] = "dll_pt.c0:100.4-100.32: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0F 3E # aldc 3902       # s[3902] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:100.4-100.32: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(dll_pt_at_left(B, "dll_pt.c0:100.14-100.31")) [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # B->point = B->point->prev;
15 00    # vload 0         # B
14 0F 50 # aldc 3920       # s[3920] = "dll_pt.c0:101.12-101.24"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:101.12-101.24")
14 0F 68 # aldc 3944       # s[3944] = "dll_pt.c0:101.4-101.25: @ensures annotation failed"
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:101.12-101.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<dll_pt_delete>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
01 05             # code length = 261 bytes
15 00    # vload 0         # B
14 0F 9B # aldc 3995       # s[3995] = "dll_pt.c0:109.13-109.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:109.13-109.25")
14 0F B3 # aldc 4019       # s[4019] = "dll_pt.c0:109.4-109.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 0F E8 # aldc 4072       # s[4072] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:109.4-109.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:109.13-109.25") [failure message on stack]
15 00    # vload 0         # B
14 0F FA # aldc 4090       # s[4090] = "dll_pt.c0:110.15-110.32"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "dll_pt.c0:110.15-110.32")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_left(B, "dll_pt.c0:110.15-110.32") == true) goto <143:cond_true>
A7 00 0E # goto +14        # goto <144:cond_false>
# <143:cond_true>
15 00    # vload 0         # B
14 10 12 # aldc 4114       # s[4114] = "dll_pt.c0:110.36-110.54"
B8 00 18 # invokestatic 24 # dll_pt_at_right(B, "dll_pt.c0:110.36-110.54")
A7 00 05 # goto +5         # goto <145:cond_end>
# <144:cond_false>
10 00    # bipush 0        # false
# <145:cond_end>
10 01    # bipush 1        # 
82       # ixor            # !((dll_pt_at_left(B, "dll_pt.c0:110.15-110.32") && dll_pt_at_right(B, "dll_pt.c0:110.36-110.54")))
14 10 2A # aldc 4138       # s[4138] = "dll_pt.c0:110.4-110.56: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 10 5F # aldc 4191       # s[4191] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("dll_pt.c0:110.4-110.56: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!((dll_pt_at_left(B, "dll_pt.c0:110.15-110.32") && dll_pt_at_right(B, "dll_pt.c0:110.36-110.54"))) [failure message on stack]
15 00    # vload 0         # B
14 10 71 # aldc 4209       # s[4209] = "dll_pt.c0:114.7-114.24"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "dll_pt.c0:114.7-114.24")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_left(B, "dll_pt.c0:114.7-114.24") == true) goto <146:then>
A7 00 33 # goto +51        # goto <147:else>
# <146:then>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
62 08    # aaddf 8         # &B->start->next
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # B->start->next = B->point->next;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
62 10    # aaddf 16        # &B->point->next->prev
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
4F       # amstore         # B->point->next->prev = B->start;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # B->point = B->point->next;
A7 00 73 # goto +115       # goto <148:endif>
# <147:else>
15 00    # vload 0         # B
14 10 88 # aldc 4232       # s[4232] = "dll_pt.c0:119.12-119.30"
B8 00 18 # invokestatic 24 # dll_pt_at_right(B, "dll_pt.c0:119.12-119.30")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_right(B, "dll_pt.c0:119.12-119.30") == true) goto <149:then>
A7 00 30 # goto +48        # goto <150:else>
# <149:then>
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
62 10    # aaddf 16        # &B->end->prev
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # B->end->prev = B->point->prev;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # B->point = B->point->prev;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
4F       # amstore         # B->point->next = B->end;
A7 00 36 # goto +54        # goto <151:endif>
# <150:else>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
62 10    # aaddf 16        # &B->point->next->prev
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # B->point->next->prev = B->point->prev;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
62 08    # aaddf 8         # &B->point->prev->next
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # B->point->prev->next = B->point->next;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # B->point = B->point->next;
# <151:endif>
# <148:endif>
15 00    # vload 0         # B
14 10 A0 # aldc 4256       # s[4256] = "dll_pt.c0:111.12-111.24"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "dll_pt.c0:111.12-111.24")
14 10 B8 # aldc 4280       # s[4280] = "dll_pt.c0:111.4-111.25: @ensures annotation failed"
CF       # assert          # assertis_dll_pt(B, "dll_pt.c0:111.12-111.24") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<is_dll_segment>
00 03             # number of arguments = 3
00 06             # number of local variables = 6
00 B4             # code length = 180 bytes
15 00    # vload 0         # start
01       # aconst_null     # NULL
9F 00 0F # if_cmpeq +15    # if (start == NULL) goto <95:then>
A7 00 03 # goto +3         # goto <98:or>
# <98:or>
15 01    # vload 1         # end
01       # aconst_null     # NULL
9F 00 06 # if_cmpeq +6     # if (end == NULL) goto <95:then>
A7 00 0D # goto +13        # goto <96:else>
# <95:then>
10 00    # bipush 0        # false
36 03    # vstore 3        # _result = false;
15 03    # vload 3         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <97:endif>
# <96:else>
# <97:endif>
15 00    # vload 0         # start
36 04    # vstore 4        # pre = start;
15 00    # vload 0         # start
36 05    # vstore 5        # post = start;
# <99:loop>
A7 00 03 # goto +3         # goto <100:body>
# <100:body>
15 04    # vload 4         # pre
15 05    # vload 5         # post
9F 00 06 # if_cmpeq +6     # if (pre == post) goto <102:cond_true>
A7 00 08 # goto +8         # goto <103:cond_false>
# <102:cond_true>
10 01    # bipush 1        # true
A7 00 17 # goto +23        # goto <104:cond_end>
# <103:cond_false>
15 04    # vload 4         # pre
62 08    # aaddf 8         # &pre->next
2F       # amload          # pre->next
15 05    # vload 5         # post
9F 00 06 # if_cmpeq +6     # if (pre->next == post) goto <105:cond_true>
A7 00 08 # goto +8         # goto <106:cond_false>
# <105:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <107:cond_end>
# <106:cond_false>
10 00    # bipush 0        # false
# <107:cond_end>
# <104:cond_end>
14 0C 5D # aldc 3165       # s[3165] = "dll_pt.c0:47.6-47.58: @loop_invariant annotation failed"
CF       # assert          # assert((pre == post) || (pre->next == post)) [failure message on stack]
15 05    # vload 5         # post
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (post != NULL) goto <108:then>
A7 00 53 # goto +83        # goto <109:else>
# <108:then>
15 04    # vload 4         # pre
15 05    # vload 5         # post
9F 00 2A # if_cmpeq +42    # if (pre == post) goto <112:else>
A7 00 03 # goto +3         # goto <114:or>
# <114:or>
15 05    # vload 5         # post
62 10    # aaddf 16        # &post->prev
2F       # amload          # post->prev
15 04    # vload 4         # pre
9F 00 06 # if_cmpeq +6     # if (post->prev == pre) goto <115:and>
A7 00 10 # goto +16        # goto <111:then>
# <115:and>
15 04    # vload 4         # pre
62 08    # aaddf 8         # &pre->next
2F       # amload          # pre->next
15 05    # vload 5         # post
9F 00 10 # if_cmpeq +16    # if (pre->next == post) goto <112:else>
A7 00 03 # goto +3         # goto <111:then>
# <111:then>
10 00    # bipush 0        # false
36 03    # vstore 3        # _result = false;
15 03    # vload 3         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <113:endif>
# <112:else>
# <113:endif>
15 05    # vload 5         # post
15 01    # vload 1         # end
9F 00 06 # if_cmpeq +6     # if (post == end) goto <116:then>
A7 00 0D # goto +13        # goto <117:else>
# <116:then>
10 01    # bipush 1        # true
36 03    # vstore 3        # _result = true;
15 03    # vload 3         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <118:endif>
# <117:else>
# <118:endif>
15 05    # vload 5         # post
36 04    # vstore 4        # pre = post;
15 05    # vload 5         # post
62 08    # aaddf 8         # &post->next
2F       # amload          # post->next
36 05    # vstore 5        # post = post->next;
A7 00 06 # goto +6         # goto <110:endif>
# <109:else>
A7 00 06 # goto +6         # break
# <110:endif>
A7 FF 7A # goto -134       # goto <99:loop>
# <101:exit>
10 00    # bipush 0        # false
36 03    # vstore 3        # _result = false;
15 03    # vload 3         # _result
B0       # return          # 


#<is_tbuf>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 4B             # code length = 75 bytes
15 00    # vload 0         # B
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (B != NULL) goto <214:and>
A7 00 3E # goto +62        # goto <210:cond_false>
# <214:and>
15 00    # vload 0         # B
14 13 51 # aldc 4945       # s[4945] = "tbuf.c0:75.10-75.22"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "tbuf.c0:75.10-75.22")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (is_dll_pt(B, "tbuf.c0:75.10-75.22") == true) goto <213:and>
A7 00 2E # goto +46        # goto <210:cond_false>
# <213:and>
15 00    # vload 0         # B
14 13 65 # aldc 4965       # s[4965] = "tbuf.c0:76.10-76.31"
B8 00 26 # invokestatic 38 # elem_is_gap_buffer(B, "tbuf.c0:76.10-76.31")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (elem_is_gap_buffer(B, "tbuf.c0:76.10-76.31") == true) goto <212:and>
A7 00 1E # goto +30        # goto <210:cond_false>
# <212:and>
15 00    # vload 0         # B
14 13 79 # aldc 4985       # s[4985] = "tbuf.c0:77.10-77.41"
B8 00 25 # invokestatic 37 # is_one_empty_or_all_nonempty(B, "tbuf.c0:77.10-77.41")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (is_one_empty_or_all_nonempty(B, "tbuf.c0:77.10-77.41") == true) goto <209:cond_true>
A7 00 0E # goto +14        # goto <210:cond_false>
# <209:cond_true>
15 00    # vload 0         # B
14 13 8D # aldc 5005       # s[5005] = "tbuf.c0:78.10-78.25"
B8 00 24 # invokestatic 36 # is_alignment(B, "tbuf.c0:78.10-78.25")
A7 00 05 # goto +5         # goto <211:cond_end>
# <210:cond_false>
10 00    # bipush 0        # false
# <211:cond_end>
36 02    # vstore 2        # _result = (((((B != NULL) && is_dll_pt(B, "tbuf.c0:75.10-75.22")) && elem_is_gap_buffer(B, "tbuf.c0:76.10-76.31")) && is_one_empty_or_all_nonempty(B, "tbuf.c0:77.10-77.41")) && is_alignment(B, "tbuf.c0:78.10-78.25"));
15 02    # vload 2         # _result
B0       # return          # 


#<tbuf_new>
00 01             # number of arguments = 1
00 06             # number of local variables = 6
00 A6             # code length = 166 bytes
BB 18    # new 24          # alloc(tbuf)
36 02    # vstore 2        # T = alloc(tbuf);
10 10    # bipush 16       # 16
36 03    # vstore 3        # limit = 16;
15 02    # vload 2         # T
62 00    # aaddf 0         # &T->start
BB 18    # new 24          # alloc(dll)
4F       # amstore         # T->start = alloc(dll);
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
BB 18    # new 24          # alloc(dll)
4F       # amstore         # T->point = alloc(dll);
15 02    # vload 2         # T
62 10    # aaddf 16        # &T->end
BB 18    # new 24          # alloc(dll)
4F       # amstore         # T->end = alloc(dll);
15 02    # vload 2         # T
62 00    # aaddf 0         # &T->start
2F       # amload          # T->start
62 10    # aaddf 16        # &T->start->prev
01       # aconst_null     # NULL
4F       # amstore         # T->start->prev = NULL;
15 02    # vload 2         # T
62 00    # aaddf 0         # &T->start
2F       # amload          # T->start
62 00    # aaddf 0         # &T->start->data
15 03    # vload 3         # limit
14 13 A1 # aldc 5025       # s[5025] = "tbuf.c0:91.20-91.37"
B8 00 10 # invokestatic 16 # gapbuf_new(limit, "tbuf.c0:91.20-91.37")
4F       # amstore         # T->start->data = gapbuf_new(limit, "tbuf.c0:91.20-91.37");
15 02    # vload 2         # T
62 00    # aaddf 0         # &T->start
2F       # amload          # T->start
62 08    # aaddf 8         # &T->start->next
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
2F       # amload          # T->point
4F       # amstore         # T->start->next = T->point;
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
2F       # amload          # T->point
62 10    # aaddf 16        # &T->point->prev
15 02    # vload 2         # T
62 00    # aaddf 0         # &T->start
2F       # amload          # T->start
4F       # amstore         # T->point->prev = T->start;
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
2F       # amload          # T->point
62 00    # aaddf 0         # &T->point->data
15 03    # vload 3         # limit
14 13 B5 # aldc 5045       # s[5045] = "tbuf.c0:94.20-94.37"
B8 00 10 # invokestatic 16 # gapbuf_new(limit, "tbuf.c0:94.20-94.37")
4F       # amstore         # T->point->data = gapbuf_new(limit, "tbuf.c0:94.20-94.37");
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
2F       # amload          # T->point
62 08    # aaddf 8         # &T->point->next
15 02    # vload 2         # T
62 10    # aaddf 16        # &T->end
2F       # amload          # T->end
4F       # amstore         # T->point->next = T->end;
15 02    # vload 2         # T
62 10    # aaddf 16        # &T->end
2F       # amload          # T->end
62 10    # aaddf 16        # &T->end->prev
15 02    # vload 2         # T
62 08    # aaddf 8         # &T->point
2F       # amload          # T->point
4F       # amstore         # T->end->prev = T->point;
15 02    # vload 2         # T
62 10    # aaddf 16        # &T->end
2F       # amload          # T->end
62 00    # aaddf 0         # &T->end->data
15 03    # vload 3         # limit
14 13 C9 # aldc 5065       # s[5065] = "tbuf.c0:97.18-97.35"
B8 00 10 # invokestatic 16 # gapbuf_new(limit, "tbuf.c0:97.18-97.35")
4F       # amstore         # T->end->data = gapbuf_new(limit, "tbuf.c0:97.18-97.35");
15 02    # vload 2         # T
62 10    # aaddf 16        # &T->end
2F       # amload          # T->end
62 08    # aaddf 8         # &T->end->next
01       # aconst_null     # NULL
4F       # amstore         # T->end->next = NULL;
15 02    # vload 2         # T
36 01    # vstore 1        # _result = T;
15 01    # vload 1         # _result
14 13 DD # aldc 5085       # s[5085] = "tbuf.c0:83.12-83.28"
B8 00 1D # invokestatic 29 # is_tbuf(_result, "tbuf.c0:83.12-83.28")
14 13 F1 # aldc 5105       # s[5105] = "tbuf.c0:83.4-83.29: @ensures annotation failed"
CF       # assert          # assertis_tbuf(_result, "tbuf.c0:83.12-83.28") [failure message on stack]
15 01    # vload 1         # _result
B0       # return          # 


#<tbuf_split_pt>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
01 07             # code length = 263 bytes
15 00    # vload 0         # B
14 16 71 # aldc 5745       # s[5745] = "tbuf.c0:154.13-154.23"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:154.13-154.23")
14 16 87 # aldc 5767       # s[5767] = "tbuf.c0:154.4-154.24: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 16 BA # aldc 5818       # s[5818] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:154.4-154.24: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_tbuf(B, "tbuf.c0:154.13-154.23") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 16 CC # aldc 5836       # s[5836] = "tbuf.c0:155.13-155.40"
B8 00 0D # invokestatic 13 # gapbuf_full(B->point->data, "tbuf.c0:155.13-155.40")
14 16 E2 # aldc 5858       # s[5858] = "tbuf.c0:155.4-155.41: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 17 15 # aldc 5909       # s[5909] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:155.4-155.41: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertgapbuf_full(B->point->data, "tbuf.c0:155.13-155.40") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
36 02    # vstore 2        # point_node = B->point;
15 02    # vload 2         # point_node
62 00    # aaddf 0         # &point_node->data
2F       # amload          # point_node->data
36 03    # vstore 3        # point_node_data = point_node->data;
10 10    # bipush 16       # 16
36 04    # vstore 4        # limit = 16;
15 04    # vload 4         # limit
14 17 27 # aldc 5927       # s[5927] = "tbuf.c0:162.25-162.42"
B8 00 10 # invokestatic 16 # gapbuf_new(limit, "tbuf.c0:162.25-162.42")
36 05    # vstore 5        # left_gapbuf = gapbuf_new(limit, "tbuf.c0:162.25-162.42");
15 04    # vload 4         # limit
14 17 3D # aldc 5949       # s[5949] = "tbuf.c0:163.26-163.43"
B8 00 10 # invokestatic 16 # gapbuf_new(limit, "tbuf.c0:163.26-163.43")
36 06    # vstore 6        # right_gapbuf = gapbuf_new(limit, "tbuf.c0:163.26-163.43");
BB 18    # new 24          # alloc(dll)
36 07    # vstore 7        # left_new_node = alloc(dll);
BB 18    # new 24          # alloc(dll)
36 08    # vstore 8        # right_new_node = alloc(dll);
15 03    # vload 3         # point_node_data
15 05    # vload 5         # left_gapbuf
15 06    # vload 6         # right_gapbuf
14 17 53 # aldc 5971       # s[5971] = "tbuf.c0:166.3-166.59"
B8 00 28 # invokestatic 40 # split_helper(point_node_data, left_gapbuf, right_gapbuf, "tbuf.c0:166.3-166.59")
57       # pop             # (ignore result)
15 07    # vload 7         # left_new_node
62 00    # aaddf 0         # &left_new_node->data
15 05    # vload 5         # left_gapbuf
4F       # amstore         # left_new_node->data = left_gapbuf;
15 08    # vload 8         # right_new_node
62 00    # aaddf 0         # &right_new_node->data
15 06    # vload 6         # right_gapbuf
4F       # amstore         # right_new_node->data = right_gapbuf;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
62 08    # aaddf 8         # &B->point->prev->next
15 07    # vload 7         # left_new_node
4F       # amstore         # B->point->prev->next = left_new_node;
15 07    # vload 7         # left_new_node
62 10    # aaddf 16        # &left_new_node->prev
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # left_new_node->prev = B->point->prev;
15 07    # vload 7         # left_new_node
62 08    # aaddf 8         # &left_new_node->next
15 08    # vload 8         # right_new_node
4F       # amstore         # left_new_node->next = right_new_node;
15 08    # vload 8         # right_new_node
62 10    # aaddf 16        # &right_new_node->prev
15 07    # vload 7         # left_new_node
4F       # amstore         # right_new_node->prev = left_new_node;
15 08    # vload 8         # right_new_node
62 08    # aaddf 8         # &right_new_node->next
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
4F       # amstore         # right_new_node->next = B->point->next;
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
62 10    # aaddf 16        # &B->point->next->prev
15 08    # vload 8         # right_new_node
4F       # amstore         # B->point->next->prev = right_new_node;
15 07    # vload 7         # left_new_node
62 00    # aaddf 0         # &left_new_node->data
2F       # amload          # left_new_node->data
14 17 68 # aldc 5992       # s[5992] = "tbuf.c0:175.7-175.43"
B8 00 0F # invokestatic 15 # gapbuf_at_right(left_new_node->data, "tbuf.c0:175.7-175.43")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_at_right(left_new_node->data, "tbuf.c0:175.7-175.43") == true) goto <248:then>
A7 00 0D # goto +13        # goto <249:else>
# <248:then>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 08    # vload 8         # right_new_node
4F       # amstore         # B->point = right_new_node;
A7 00 0A # goto +10        # goto <250:endif>
# <249:else>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 07    # vload 7         # left_new_node
4F       # amstore         # B->point = left_new_node;
# <250:endif>
15 00    # vload 0         # B
14 17 7D # aldc 6013       # s[6013] = "tbuf.c0:156.12-156.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:156.12-156.22")
14 17 93 # aldc 6035       # s[6035] = "tbuf.c0:156.4-156.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:156.12-156.22") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 17 C4 # aldc 6084       # s[6084] = "tbuf.c0:157.13-157.40"
B8 00 0D # invokestatic 13 # gapbuf_full(B->point->data, "tbuf.c0:157.13-157.40")
10 01    # bipush 1        # 
82       # ixor            # !(gapbuf_full(B->point->data, "tbuf.c0:157.13-157.40"))
14 17 DA # aldc 6106       # s[6106] = "tbuf.c0:157.4-157.41: @ensures annotation failed"
CF       # assert          # assert!(gapbuf_full(B->point->data, "tbuf.c0:157.13-157.40")) [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<tbuf_forward>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
00 8B             # code length = 139 bytes
15 00    # vload 0         # B
14 18 0B # aldc 6155       # s[6155] = "tbuf.c0:184.13-184.23"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:184.13-184.23")
14 18 21 # aldc 6177       # s[6177] = "tbuf.c0:184.4-184.24: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 18 54 # aldc 6228       # s[6228] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:184.4-184.24: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_tbuf(B, "tbuf.c0:184.13-184.23") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 18 66 # aldc 6246       # s[6246] = "tbuf.c0:187.7-187.38"
B8 00 0F # invokestatic 15 # gapbuf_at_right(B->point->data, "tbuf.c0:187.7-187.38")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_at_right(B->point->data, "tbuf.c0:187.7-187.38") == true) goto <251:then>
A7 00 43 # goto +67        # goto <252:else>
# <251:then>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
9F 00 06 # if_cmpeq +6     # if (B->point->next == B->end) goto <254:then>
A7 00 15 # goto +21        # goto <255:else>
# <254:then>
15 00    # vload 0         # B
14 18 7B # aldc 6267       # s[6267] = "tbuf.c0:185.12-185.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:185.12-185.22")
14 18 91 # aldc 6289       # s[6289] = "tbuf.c0:185.4-185.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:185.12-185.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
A7 00 1B # goto +27        # goto <256:endif>
# <255:else>
15 00    # vload 0         # B
14 18 C2 # aldc 6338       # s[6338] = "tbuf.c0:192.7-192.24"
B8 00 19 # invokestatic 25 # dll_pt_forward(B, "tbuf.c0:192.7-192.24")
57       # pop             # (ignore result)
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 18 D7 # aldc 6359       # s[6359] = "tbuf.c0:193.7-193.37"
B8 00 11 # invokestatic 17 # gapbuf_forward(B->point->data, "tbuf.c0:193.7-193.37")
57       # pop             # (ignore result)
# <256:endif>
A7 00 12 # goto +18        # goto <253:endif>
# <252:else>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 18 EC # aldc 6380       # s[6380] = "tbuf.c0:197.5-197.35"
B8 00 11 # invokestatic 17 # gapbuf_forward(B->point->data, "tbuf.c0:197.5-197.35")
57       # pop             # (ignore result)
# <253:endif>
15 00    # vload 0         # B
14 19 01 # aldc 6401       # s[6401] = "tbuf.c0:185.12-185.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:185.12-185.22")
14 19 17 # aldc 6423       # s[6423] = "tbuf.c0:185.4-185.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:185.12-185.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<tbuf_backward>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
00 8B             # code length = 139 bytes
15 00    # vload 0         # B
14 19 48 # aldc 6472       # s[6472] = "tbuf.c0:203.13-203.23"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:203.13-203.23")
14 19 5E # aldc 6494       # s[6494] = "tbuf.c0:203.4-203.24: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 19 91 # aldc 6545       # s[6545] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:203.4-203.24: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_tbuf(B, "tbuf.c0:203.13-203.23") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 19 A3 # aldc 6563       # s[6563] = "tbuf.c0:206.7-206.37"
B8 00 0E # invokestatic 14 # gapbuf_at_left(B->point->data, "tbuf.c0:206.7-206.37")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_at_left(B->point->data, "tbuf.c0:206.7-206.37") == true) goto <257:then>
A7 00 43 # goto +67        # goto <258:else>
# <257:then>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
9F 00 06 # if_cmpeq +6     # if (B->point->prev == B->start) goto <260:then>
A7 00 15 # goto +21        # goto <261:else>
# <260:then>
15 00    # vload 0         # B
14 19 B8 # aldc 6584       # s[6584] = "tbuf.c0:204.12-204.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:204.12-204.22")
14 19 CE # aldc 6606       # s[6606] = "tbuf.c0:204.4-204.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:204.12-204.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
A7 00 1B # goto +27        # goto <262:endif>
# <261:else>
15 00    # vload 0         # B
14 19 FF # aldc 6655       # s[6655] = "tbuf.c0:211.7-211.25"
B8 00 1A # invokestatic 26 # dll_pt_backward(B, "tbuf.c0:211.7-211.25")
57       # pop             # (ignore result)
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1A 14 # aldc 6676       # s[6676] = "tbuf.c0:212.7-212.38"
B8 00 12 # invokestatic 18 # gapbuf_backward(B->point->data, "tbuf.c0:212.7-212.38")
57       # pop             # (ignore result)
# <262:endif>
A7 00 12 # goto +18        # goto <259:endif>
# <258:else>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1A 29 # aldc 6697       # s[6697] = "tbuf.c0:216.5-216.36"
B8 00 12 # invokestatic 18 # gapbuf_backward(B->point->data, "tbuf.c0:216.5-216.36")
57       # pop             # (ignore result)
# <259:endif>
15 00    # vload 0         # B
14 1A 3E # aldc 6718       # s[6718] = "tbuf.c0:204.12-204.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:204.12-204.22")
14 1A 54 # aldc 6740       # s[6740] = "tbuf.c0:204.4-204.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:204.12-204.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<tbuf_insert>
00 03             # number of arguments = 3
00 09             # number of local variables = 9
00 88             # code length = 136 bytes
15 00    # vload 0         # B
14 1A 85 # aldc 6789       # s[6789] = "tbuf.c0:222.13-222.23"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:222.13-222.23")
14 1A 9B # aldc 6811       # s[6811] = "tbuf.c0:222.4-222.24: @requires annotation failed\n"
15 02    # vload 2         # _caller
14 1A CE # aldc 6862       # s[6862] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:222.4-222.24: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_tbuf(B, "tbuf.c0:222.13-222.23") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1A E0 # aldc 6880       # s[6880] = "tbuf.c0:225.7-225.34"
B8 00 0D # invokestatic 13 # gapbuf_full(B->point->data, "tbuf.c0:225.7-225.34")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_full(B->point->data, "tbuf.c0:225.7-225.34") == true) goto <263:then>
A7 00 2F # goto +47        # goto <264:else>
# <263:then>
15 00    # vload 0         # B
14 1A F5 # aldc 6901       # s[6901] = "tbuf.c0:226.5-226.21"
B8 00 1F # invokestatic 31 # tbuf_split_pt(B, "tbuf.c0:226.5-226.21")
57       # pop             # (ignore result)
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
15 01    # vload 1         # c
14 1B 0A # aldc 6922       # s[6922] = "tbuf.c0:227.5-227.37"
B8 00 13 # invokestatic 19 # gapbuf_insert(B->point->data, c, "tbuf.c0:227.5-227.37")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1B 1F # aldc 6943       # s[6943] = "tbuf.c0:223.12-223.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:223.12-223.22")
14 1B 35 # aldc 6965       # s[6965] = "tbuf.c0:223.4-223.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:223.12-223.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
A7 00 03 # goto +3         # goto <265:endif>
# <264:else>
# <265:endif>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
15 01    # vload 1         # c
14 1B 66 # aldc 7014       # s[7014] = "tbuf.c0:230.3-230.35"
B8 00 13 # invokestatic 19 # gapbuf_insert(B->point->data, c, "tbuf.c0:230.3-230.35")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1B 7B # aldc 7035       # s[7035] = "tbuf.c0:223.12-223.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:223.12-223.22")
14 1B 91 # aldc 7057       # s[7057] = "tbuf.c0:223.4-223.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:223.12-223.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
15 00    # vload 0         # B
14 1B C2 # aldc 7106       # s[7106] = "tbuf.c0:223.12-223.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:223.12-223.22")
14 1B D8 # aldc 7128       # s[7128] = "tbuf.c0:223.4-223.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:223.12-223.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<tbuf_delete>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
00 E7             # code length = 231 bytes
15 00    # vload 0         # B
14 1C 09 # aldc 7177       # s[7177] = "tbuf.c0:236.13-236.23"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:236.13-236.23")
14 1C 1F # aldc 7199       # s[7199] = "tbuf.c0:236.4-236.24: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 1C 52 # aldc 7250       # s[7250] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:236.4-236.24: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_tbuf(B, "tbuf.c0:236.13-236.23") [failure message on stack]
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1C 64 # aldc 7268       # s[7268] = "tbuf.c0:239.7-239.37"
B8 00 0E # invokestatic 14 # gapbuf_at_left(B->point->data, "tbuf.c0:239.7-239.37")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_at_left(B->point->data, "tbuf.c0:239.7-239.37") == true) goto <269:and>
A7 00 25 # goto +37        # goto <267:else>
# <269:and>
15 00    # vload 0         # B
14 1C 79 # aldc 7289       # s[7289] = "tbuf.c0:239.41-239.58"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "tbuf.c0:239.41-239.58")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_left(B, "tbuf.c0:239.41-239.58") == true) goto <266:then>
A7 00 15 # goto +21        # goto <267:else>
# <266:then>
15 00    # vload 0         # B
14 1C 8F # aldc 7311       # s[7311] = "tbuf.c0:237.12-237.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:237.12-237.22")
14 1C A5 # aldc 7333       # s[7333] = "tbuf.c0:237.4-237.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:237.12-237.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
A7 00 03 # goto +3         # goto <268:endif>
# <267:else>
# <268:endif>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1C D6 # aldc 7382       # s[7382] = "tbuf.c0:240.7-240.37"
B8 00 0E # invokestatic 14 # gapbuf_at_left(B->point->data, "tbuf.c0:240.7-240.37")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_at_left(B->point->data, "tbuf.c0:240.7-240.37") == true) goto <270:then>
A7 00 13 # goto +19        # goto <271:else>
# <270:then>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 10    # aaddf 16        # &B->point->prev
2F       # amload          # B->point->prev
4F       # amstore         # B->point = B->point->prev;
A7 00 03 # goto +3         # goto <272:endif>
# <271:else>
# <272:endif>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1C EB # aldc 7403       # s[7403] = "tbuf.c0:243.3-243.32"
B8 00 14 # invokestatic 20 # gapbuf_delete(B->point->data, "tbuf.c0:243.3-243.32")
57       # pop             # (ignore result)
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 1D 00 # aldc 7424       # s[7424] = "tbuf.c0:244.7-244.35"
B8 00 0C # invokestatic 12 # gapbuf_empty(B->point->data, "tbuf.c0:244.7-244.35")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_empty(B->point->data, "tbuf.c0:244.7-244.35") == true) goto <273:then>
A7 00 32 # goto +50        # goto <274:else>
# <273:then>
15 00    # vload 0         # B
14 1D 15 # aldc 7445       # s[7445] = "tbuf.c0:245.11-245.28"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "tbuf.c0:245.11-245.28")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_left(B, "tbuf.c0:245.11-245.28") == true) goto <279:and>
A7 00 13 # goto +19        # goto <276:then>
# <279:and>
15 00    # vload 0         # B
14 1D 2B # aldc 7467       # s[7467] = "tbuf.c0:245.32-245.50"
B8 00 18 # invokestatic 24 # dll_pt_at_right(B, "tbuf.c0:245.32-245.50")
10 01    # bipush 1        # true
9F 00 12 # if_cmpeq +18    # if (dll_pt_at_right(B, "tbuf.c0:245.32-245.50") == true) goto <277:else>
A7 00 03 # goto +3         # goto <276:then>
# <276:then>
15 00    # vload 0         # B
14 1D 41 # aldc 7489       # s[7489] = "tbuf.c0:246.7-246.23"
B8 00 1B # invokestatic 27 # dll_pt_delete(B, "tbuf.c0:246.7-246.23")
57       # pop             # (ignore result)
A7 00 03 # goto +3         # goto <278:endif>
# <277:else>
# <278:endif>
A7 00 03 # goto +3         # goto <275:endif>
# <274:else>
# <275:endif>
15 00    # vload 0         # B
14 1D 56 # aldc 7510       # s[7510] = "tbuf.c0:237.12-237.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:237.12-237.22")
14 1D 6C # aldc 7532       # s[7532] = "tbuf.c0:237.4-237.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:237.12-237.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 
15 00    # vload 0         # B
14 1D 9D # aldc 7581       # s[7581] = "tbuf.c0:237.12-237.22"
B8 00 1D # invokestatic 29 # is_tbuf(B, "tbuf.c0:237.12-237.22")
14 1D B3 # aldc 7603       # s[7603] = "tbuf.c0:237.4-237.23: @ensures annotation failed"
CF       # assert          # assertis_tbuf(B, "tbuf.c0:237.12-237.22") [failure message on stack]
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<is_alignment>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 E6             # code length = 230 bytes
15 00    # vload 0         # B
14 10 EB # aldc 4331       # s[4331] = "tbuf.c0:30.13-30.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "tbuf.c0:30.13-30.25")
14 10 FF # aldc 4351       # s[4351] = "tbuf.c0:30.4-30.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 11 30 # aldc 4400       # s[4400] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:30.4-30.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "tbuf.c0:30.13-30.25") [failure message on stack]
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
62 08    # aaddf 8         # &B->start->next
2F       # amload          # B->start->next
36 03    # vstore 3        # G = B->start->next;
# <152:loop>
A7 00 03 # goto +3         # goto <153:body>
# <153:body>
15 03    # vload 3         # G
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (G != NULL) goto <155:cond_true>
A7 00 1A # goto +26        # goto <156:cond_false>
# <155:cond_true>
15 03    # vload 3         # G
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (G != B->end) goto <158:cond_true>
A7 00 08 # goto +8         # goto <159:cond_false>
# <158:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <160:cond_end>
# <159:cond_false>
10 00    # bipush 0        # false
# <160:cond_end>
A7 00 05 # goto +5         # goto <157:cond_end>
# <156:cond_false>
10 00    # bipush 0        # false
# <157:cond_end>
14 11 42 # aldc 4418       # s[4418] = "tbuf.c0:33.6-33.46: @loop_invariant annotation failed"
CF       # assert          # assert((G != NULL) && (G != B->end)) [failure message on stack]
15 03    # vload 3         # G
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
A0 00 06 # if_cmpne +6     # if (G != B->point) goto <161:then>
A7 00 2A # goto +42        # goto <162:else>
# <161:then>
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->data
2F       # amload          # G->data
14 11 78 # aldc 4472       # s[4472] = "tbuf.c0:35.10-35.34"
B8 00 0F # invokestatic 15 # gapbuf_at_right(G->data, "tbuf.c0:35.10-35.34")
10 01    # bipush 1        # true
9F 00 10 # if_cmpeq +16    # if (gapbuf_at_right(G->data, "tbuf.c0:35.10-35.34") == true) goto <165:else>
A7 00 03 # goto +3         # goto <164:then>
# <164:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <166:endif>
# <165:else>
# <166:endif>
15 03    # vload 3         # G
62 08    # aaddf 8         # &G->next
2F       # amload          # G->next
36 03    # vstore 3        # G = G->next;
A7 00 06 # goto +6         # goto <163:endif>
# <162:else>
A7 00 06 # goto +6         # break
# <163:endif>
A7 FF A0 # goto -96        # goto <152:loop>
# <154:exit>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 08    # aaddf 8         # &B->point->next
2F       # amload          # B->point->next
36 03    # vstore 3        # G = B->point->next;
# <167:loop>
A7 00 03 # goto +3         # goto <168:body>
# <168:body>
15 03    # vload 3         # G
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (G != NULL) goto <170:cond_true>
A7 00 08 # goto +8         # goto <171:cond_false>
# <170:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <172:cond_end>
# <171:cond_false>
10 00    # bipush 0        # false
# <172:cond_end>
14 11 8C # aldc 4492       # s[4492] = "tbuf.c0:38.6-38.31: @loop_invariant annotation failed"
CF       # assert          # assert(G != NULL) [failure message on stack]
15 03    # vload 3         # G
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (G != B->end) goto <173:then>
A7 00 2A # goto +42        # goto <174:else>
# <173:then>
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->data
2F       # amload          # G->data
14 11 C2 # aldc 4546       # s[4546] = "tbuf.c0:40.10-40.33"
B8 00 0E # invokestatic 14 # gapbuf_at_left(G->data, "tbuf.c0:40.10-40.33")
10 01    # bipush 1        # true
9F 00 10 # if_cmpeq +16    # if (gapbuf_at_left(G->data, "tbuf.c0:40.10-40.33") == true) goto <177:else>
A7 00 03 # goto +3         # goto <176:then>
# <176:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <178:endif>
# <177:else>
# <178:endif>
15 03    # vload 3         # G
62 08    # aaddf 8         # &G->next
2F       # amload          # G->next
36 03    # vstore 3        # G = G->next;
A7 00 06 # goto +6         # goto <175:endif>
# <174:else>
A7 00 06 # goto +6         # break
# <175:endif>
A7 FF B2 # goto -78        # goto <167:loop>
# <169:exit>
10 01    # bipush 1        # true
36 02    # vstore 2        # _result = true;
15 02    # vload 2         # _result
B0       # return          # 


#<is_one_empty_or_all_nonempty>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 B9             # code length = 185 bytes
15 00    # vload 0         # B
14 11 D6 # aldc 4566       # s[4566] = "tbuf.c0:47.13-47.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "tbuf.c0:47.13-47.25")
14 11 EA # aldc 4586       # s[4586] = "tbuf.c0:47.4-47.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 12 1B # aldc 4635       # s[4635] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:47.4-47.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "tbuf.c0:47.13-47.25") [failure message on stack]
15 00    # vload 0         # B
14 12 2D # aldc 4653       # s[4653] = "tbuf.c0:49.8-49.25"
B8 00 17 # invokestatic 23 # dll_pt_at_left(B, "tbuf.c0:49.8-49.25")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_left(B, "tbuf.c0:49.8-49.25") == true) goto <183:and>
A7 00 33 # goto +51        # goto <180:else>
# <183:and>
15 00    # vload 0         # B
14 12 40 # aldc 4672       # s[4672] = "tbuf.c0:49.29-49.47"
B8 00 18 # invokestatic 24 # dll_pt_at_right(B, "tbuf.c0:49.29-49.47")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (dll_pt_at_right(B, "tbuf.c0:49.29-49.47") == true) goto <182:and>
A7 00 23 # goto +35        # goto <180:else>
# <182:and>
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
62 00    # aaddf 0         # &B->point->data
2F       # amload          # B->point->data
14 12 54 # aldc 4692       # s[4692] = "tbuf.c0:50.8-50.36"
B8 00 0C # invokestatic 12 # gapbuf_empty(B->point->data, "tbuf.c0:50.8-50.36")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_empty(B->point->data, "tbuf.c0:50.8-50.36") == true) goto <179:then>
A7 00 0D # goto +13        # goto <180:else>
# <179:then>
10 01    # bipush 1        # true
36 02    # vstore 2        # _result = true;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <181:endif>
# <180:else>
# <181:endif>
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
62 08    # aaddf 8         # &B->start->next
2F       # amload          # B->start->next
36 03    # vstore 3        # G = B->start->next;
# <184:loop>
A7 00 03 # goto +3         # goto <185:body>
# <185:body>
15 03    # vload 3         # G
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (G != NULL) goto <187:cond_true>
A7 00 08 # goto +8         # goto <188:cond_false>
# <187:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <189:cond_end>
# <188:cond_false>
10 00    # bipush 0        # false
# <189:cond_end>
14 12 67 # aldc 4711       # s[4711] = "tbuf.c0:52.6-52.31: @loop_invariant annotation failed"
CF       # assert          # assert(G != NULL) [failure message on stack]
15 03    # vload 3         # G
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (G != B->end) goto <190:then>
A7 00 2A # goto +42        # goto <191:else>
# <190:then>
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->data
2F       # amload          # G->data
14 12 9D # aldc 4765       # s[4765] = "tbuf.c0:54.9-54.30"
B8 00 0C # invokestatic 12 # gapbuf_empty(G->data, "tbuf.c0:54.9-54.30")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_empty(G->data, "tbuf.c0:54.9-54.30") == true) goto <193:then>
A7 00 0D # goto +13        # goto <194:else>
# <193:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <195:endif>
# <194:else>
# <195:endif>
15 03    # vload 3         # G
62 08    # aaddf 8         # &G->next
2F       # amload          # G->next
36 03    # vstore 3        # G = G->next;
A7 00 06 # goto +6         # goto <192:endif>
# <191:else>
A7 00 06 # goto +6         # break
# <192:endif>
A7 FF B2 # goto -78        # goto <184:loop>
# <186:exit>
10 01    # bipush 1        # true
36 02    # vstore 2        # _result = true;
15 02    # vload 2         # _result
B0       # return          # 


#<elem_is_gap_buffer>
00 02             # number of arguments = 2
00 06             # number of local variables = 6
00 89             # code length = 137 bytes
15 00    # vload 0         # B
14 12 B0 # aldc 4784       # s[4784] = "tbuf.c0:61.13-61.25"
B8 00 16 # invokestatic 22 # is_dll_pt(B, "tbuf.c0:61.13-61.25")
14 12 C4 # aldc 4804       # s[4804] = "tbuf.c0:61.4-61.26: @requires annotation failed\n"
15 01    # vload 1         # _caller
14 12 F5 # aldc 4853       # s[4853] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:61.4-61.26: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertis_dll_pt(B, "tbuf.c0:61.13-61.25") [failure message on stack]
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
62 08    # aaddf 8         # &B->start->next
2F       # amload          # B->start->next
36 03    # vstore 3        # G = B->start->next;
# <196:loop>
A7 00 03 # goto +3         # goto <197:body>
# <197:body>
15 03    # vload 3         # G
01       # aconst_null     # NULL
A0 00 06 # if_cmpne +6     # if (G != NULL) goto <199:cond_true>
A7 00 08 # goto +8         # goto <200:cond_false>
# <199:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <201:cond_end>
# <200:cond_false>
10 00    # bipush 0        # false
# <201:cond_end>
14 13 07 # aldc 4871       # s[4871] = "tbuf.c0:64.6-64.31: @loop_invariant annotation failed"
CF       # assert          # assert(G != NULL) [failure message on stack]
15 03    # vload 3         # G
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (G != B->end) goto <202:then>
A7 00 3A # goto +58        # goto <203:else>
# <202:then>
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->data
2F       # amload          # G->data
14 13 3D # aldc 4925       # s[4925] = "tbuf.c0:66.12-66.30"
B8 00 0B # invokestatic 11 # is_gapbuf(G->data, "tbuf.c0:66.12-66.30")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (is_gapbuf(G->data, "tbuf.c0:66.12-66.30") == true) goto <208:and>
A7 00 13 # goto +19        # goto <205:then>
# <208:and>
15 03    # vload 3         # G
62 00    # aaddf 0         # &G->data
2F       # amload          # G->data
62 00    # aaddf 0         # &G->data->limit
2E       # imload          # G->data->limit
10 10    # bipush 16       # 16
9F 00 10 # if_cmpeq +16    # if (G->data->limit == 16) goto <206:else>
A7 00 03 # goto +3         # goto <205:then>
# <205:then>
10 00    # bipush 0        # false
36 02    # vstore 2        # _result = false;
15 02    # vload 2         # _result
B0       # return          # 
A7 00 03 # goto +3         # goto <207:endif>
# <206:else>
# <207:endif>
15 03    # vload 3         # G
62 08    # aaddf 8         # &G->next
2F       # amload          # G->next
36 03    # vstore 3        # G = G->next;
A7 00 06 # goto +6         # goto <204:endif>
# <203:else>
A7 00 06 # goto +6         # break
# <204:endif>
A7 FF A2 # goto -94        # goto <196:loop>
# <198:exit>
10 01    # bipush 1        # true
36 02    # vstore 2        # _result = true;
15 02    # vload 2         # _result
B0       # return          # 


#<array_copy>
00 06             # number of arguments = 6
00 07             # number of local variables = 7
00 D1             # code length = 209 bytes
15 04    # vload 4         # length
10 00    # bipush 0        # 0
A2 00 06 # if_icmpge +6    # if (length >= 0) goto <215:cond_true>
A7 00 08 # goto +8         # goto <216:cond_false>
# <215:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <217:cond_end>
# <216:cond_false>
10 00    # bipush 0        # false
# <217:cond_end>
14 14 20 # aldc 5152       # s[5152] = "tbuf.c0:105.4-105.25: @requires annotation failed\n"
15 05    # vload 5         # _caller
14 14 53 # aldc 5203       # s[5203] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:105.4-105.25: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert(length >= 0) [failure message on stack]
10 00    # bipush 0        # 0
15 01    # vload 1         # src_start
A4 00 06 # if_icmple +6    # if (0 <= src_start) goto <218:cond_true>
A7 00 1B # goto +27        # goto <219:cond_false>
# <218:cond_true>
15 01    # vload 1         # src_start
15 04    # vload 4         # length
60       # iadd            # (src_start + length)
15 00    # vload 0         # src
BE       # arraylength     # \length(src)
A4 00 06 # if_icmple +6    # if ((src_start + length) <= \length(src)) goto <221:cond_true>
A7 00 08 # goto +8         # goto <222:cond_false>
# <221:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <223:cond_end>
# <222:cond_false>
10 00    # bipush 0        # false
# <223:cond_end>
A7 00 05 # goto +5         # goto <220:cond_end>
# <219:cond_false>
10 00    # bipush 0        # false
# <220:cond_end>
14 14 65 # aldc 5221       # s[5221] = "tbuf.c0:106.4-106.66: @requires annotation failed\n"
15 05    # vload 5         # _caller
14 14 98 # aldc 5272       # s[5272] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:106.4-106.66: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert((0 <= src_start) && ((src_start + length) <= \length(src))) [failure message on stack]
10 00    # bipush 0        # 0
15 03    # vload 3         # dst_start
A4 00 06 # if_icmple +6    # if (0 <= dst_start) goto <224:cond_true>
A7 00 1B # goto +27        # goto <225:cond_false>
# <224:cond_true>
15 03    # vload 3         # dst_start
15 04    # vload 4         # length
60       # iadd            # (dst_start + length)
15 02    # vload 2         # dst
BE       # arraylength     # \length(dst)
A4 00 06 # if_icmple +6    # if ((dst_start + length) <= \length(dst)) goto <227:cond_true>
A7 00 08 # goto +8         # goto <228:cond_false>
# <227:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <229:cond_end>
# <228:cond_false>
10 00    # bipush 0        # false
# <229:cond_end>
A7 00 05 # goto +5         # goto <226:cond_end>
# <225:cond_false>
10 00    # bipush 0        # false
# <226:cond_end>
14 14 AA # aldc 5290       # s[5290] = "tbuf.c0:107.4-107.66: @requires annotation failed\n"
15 05    # vload 5         # _caller
14 14 DD # aldc 5341       # s[5341] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:107.4-107.66: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert((0 <= dst_start) && ((dst_start + length) <= \length(dst))) [failure message on stack]
10 00    # bipush 0        # 0
36 06    # vstore 6        # i = 0;
# <230:loop>
A7 00 03 # goto +3         # goto <231:body>
# <231:body>
10 00    # bipush 0        # 0
15 06    # vload 6         # i
A4 00 06 # if_icmple +6    # if (0 <= i) goto <233:cond_true>
A7 00 08 # goto +8         # goto <234:cond_false>
# <233:cond_true>
10 01    # bipush 1        # true
A7 00 05 # goto +5         # goto <235:cond_end>
# <234:cond_false>
10 00    # bipush 0        # false
# <235:cond_end>
14 14 EF # aldc 5359       # s[5359] = "tbuf.c0:110.8-110.30: @loop_invariant annotation failed"
CF       # assert          # assert(0 <= i) [failure message on stack]
15 06    # vload 6         # i
15 04    # vload 4         # length
A1 00 06 # if_icmplt +6    # if (i < length) goto <236:then>
A7 00 1F # goto +31        # goto <237:else>
# <236:then>
15 02    # vload 2         # dst
15 03    # vload 3         # dst_start
15 06    # vload 6         # i
60       # iadd            # (dst_start + i)
63       # aadds           # &dst[(dst_start + i)]
15 00    # vload 0         # src
15 01    # vload 1         # src_start
15 06    # vload 6         # i
60       # iadd            # (src_start + i)
63       # aadds           # &src[(src_start + i)]
34       # cmload          # src[(src_start + i)]
55       # cmstore         # dst[(dst_start + i)] = src[(src_start + i)];
15 06    # vload 6         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 06    # vstore 6        # i += 1;
A7 00 06 # goto +6         # goto <238:endif>
# <237:else>
A7 00 06 # goto +6         # break
# <238:endif>
A7 FF BF # goto -65        # goto <230:loop>
# <232:exit>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<split_helper>
00 04             # number of arguments = 4
00 07             # number of local variables = 7
01 61             # code length = 353 bytes
15 00    # vload 0         # point_node_data
14 15 27 # aldc 5415       # s[5415] = "tbuf.c0:119.13-119.41"
B8 00 0D # invokestatic 13 # gapbuf_full(point_node_data, "tbuf.c0:119.13-119.41")
14 15 3D # aldc 5437       # s[5437] = "tbuf.c0:119.4-119.42: @requires annotation failed\n"
15 03    # vload 3         # _caller
14 15 70 # aldc 5488       # s[5488] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:119.4-119.42: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assertgapbuf_full(point_node_data, "tbuf.c0:119.13-119.41") [failure message on stack]
15 01    # vload 1         # left_gapbuf
14 15 82 # aldc 5506       # s[5506] = "tbuf.c0:120.13-120.38"
B8 00 0C # invokestatic 12 # gapbuf_empty(left_gapbuf, "tbuf.c0:120.13-120.38")
10 01    # bipush 1        # true
9F 00 06 # if_cmpeq +6     # if (gapbuf_empty(left_gapbuf, "tbuf.c0:120.13-120.38") == true) goto <239:cond_true>
A7 00 0E # goto +14        # goto <240:cond_false>
# <239:cond_true>
15 02    # vload 2         # right_gapbuf
14 15 98 # aldc 5528       # s[5528] = "tbuf.c0:120.42-120.68"
B8 00 0C # invokestatic 12 # gapbuf_empty(right_gapbuf, "tbuf.c0:120.42-120.68")
A7 00 05 # goto +5         # goto <241:cond_end>
# <240:cond_false>
10 00    # bipush 0        # false
# <241:cond_end>
14 15 AE # aldc 5550       # s[5550] = "tbuf.c0:120.4-120.69: @requires annotation failed\n"
15 03    # vload 3         # _caller
14 15 E1 # aldc 5601       # s[5601] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("tbuf.c0:120.4-120.69: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert(gapbuf_empty(left_gapbuf, "tbuf.c0:120.13-120.38") && gapbuf_empty(right_gapbuf, "tbuf.c0:120.42-120.68")) [failure message on stack]
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
10 07    # bipush 7        # 7
A4 00 06 # if_icmple +6    # if (point_node_data->gap_start <= 7) goto <242:then>
A7 00 85 # goto +133       # goto <243:else>
# <242:then>
15 01    # vload 1         # left_gapbuf
62 10    # aaddf 16        # &left_gapbuf->gap_start
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
4E       # imstore         # left_gapbuf->gap_start = point_node_data->gap_start;
15 01    # vload 1         # left_gapbuf
62 14    # aaddf 20        # &left_gapbuf->gap_end
15 01    # vload 1         # left_gapbuf
62 10    # aaddf 16        # &left_gapbuf->gap_start
2E       # imload          # left_gapbuf->gap_start
10 08    # bipush 8        # 8
60       # iadd            # (left_gapbuf->gap_start + 8)
4E       # imstore         # left_gapbuf->gap_end = (left_gapbuf->gap_start + 8);
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
10 00    # bipush 0        # 0
15 01    # vload 1         # left_gapbuf
62 08    # aaddf 8         # &left_gapbuf->buffer
2F       # amload          # left_gapbuf->buffer
10 00    # bipush 0        # 0
15 01    # vload 1         # left_gapbuf
62 10    # aaddf 16        # &left_gapbuf->gap_start
2E       # imload          # left_gapbuf->gap_start
14 15 F3 # aldc 5619       # s[5619] = "tbuf.c0:126.5-127.39"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, 0, left_gapbuf->buffer, 0, left_gapbuf->gap_start, "tbuf.c0:126.5-127.39")
57       # pop             # (ignore result)
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
15 01    # vload 1         # left_gapbuf
62 08    # aaddf 8         # &left_gapbuf->buffer
2F       # amload          # left_gapbuf->buffer
15 01    # vload 1         # left_gapbuf
62 14    # aaddf 20        # &left_gapbuf->gap_end
2E       # imload          # left_gapbuf->gap_end
10 10    # bipush 16       # 16
15 01    # vload 1         # left_gapbuf
62 14    # aaddf 20        # &left_gapbuf->gap_end
2E       # imload          # left_gapbuf->gap_end
64       # isub            # (16 - left_gapbuf->gap_end)
14 16 08 # aldc 5640       # s[5640] = "tbuf.c0:128.5-130.42"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, point_node_data->gap_start, left_gapbuf->buffer, left_gapbuf->gap_end, (16 - left_gapbuf->gap_end), "tbuf.c0:128.5-130.42")
57       # pop             # (ignore result)
15 02    # vload 2         # right_gapbuf
62 10    # aaddf 16        # &right_gapbuf->gap_start
10 00    # bipush 0        # 0
4E       # imstore         # right_gapbuf->gap_start = 0;
15 02    # vload 2         # right_gapbuf
62 14    # aaddf 20        # &right_gapbuf->gap_end
15 02    # vload 2         # right_gapbuf
62 10    # aaddf 16        # &right_gapbuf->gap_start
2E       # imload          # right_gapbuf->gap_start
10 08    # bipush 8        # 8
60       # iadd            # (right_gapbuf->gap_start + 8)
4E       # imstore         # right_gapbuf->gap_end = (right_gapbuf->gap_start + 8);
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
10 08    # bipush 8        # 8
15 02    # vload 2         # right_gapbuf
62 08    # aaddf 8         # &right_gapbuf->buffer
2F       # amload          # right_gapbuf->buffer
10 08    # bipush 8        # 8
10 08    # bipush 8        # 8
14 16 1D # aldc 5661       # s[5661] = "tbuf.c0:134.5-134.71"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, 8, right_gapbuf->buffer, 8, 8, "tbuf.c0:134.5-134.71")
57       # pop             # (ignore result)
A7 00 8F # goto +143       # goto <244:endif>
# <243:else>
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
10 08    # bipush 8        # 8
A2 00 06 # if_icmpge +6    # if (point_node_data->gap_start >= 8) goto <245:then>
A7 00 82 # goto +130       # goto <246:else>
# <245:then>
15 01    # vload 1         # left_gapbuf
62 10    # aaddf 16        # &left_gapbuf->gap_start
10 08    # bipush 8        # 8
4E       # imstore         # left_gapbuf->gap_start = 8;
15 01    # vload 1         # left_gapbuf
62 14    # aaddf 20        # &left_gapbuf->gap_end
10 10    # bipush 16       # 16
4E       # imstore         # left_gapbuf->gap_end = 16;
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
10 00    # bipush 0        # 0
15 01    # vload 1         # left_gapbuf
62 08    # aaddf 8         # &left_gapbuf->buffer
2F       # amload          # left_gapbuf->buffer
10 00    # bipush 0        # 0
10 08    # bipush 8        # 8
14 16 32 # aldc 5682       # s[5682] = "tbuf.c0:140.5-140.70"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, 0, left_gapbuf->buffer, 0, 8, "tbuf.c0:140.5-140.70")
57       # pop             # (ignore result)
15 02    # vload 2         # right_gapbuf
62 10    # aaddf 16        # &right_gapbuf->gap_start
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
10 08    # bipush 8        # 8
64       # isub            # (point_node_data->gap_start - 8)
4E       # imstore         # right_gapbuf->gap_start = (point_node_data->gap_start - 8);
15 02    # vload 2         # right_gapbuf
62 14    # aaddf 20        # &right_gapbuf->gap_end
15 02    # vload 2         # right_gapbuf
62 10    # aaddf 16        # &right_gapbuf->gap_start
2E       # imload          # right_gapbuf->gap_start
10 08    # bipush 8        # 8
60       # iadd            # (right_gapbuf->gap_start + 8)
4E       # imstore         # right_gapbuf->gap_end = (right_gapbuf->gap_start + 8);
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
10 08    # bipush 8        # 8
15 02    # vload 2         # right_gapbuf
62 08    # aaddf 8         # &right_gapbuf->buffer
2F       # amload          # right_gapbuf->buffer
10 00    # bipush 0        # 0
15 02    # vload 2         # right_gapbuf
62 10    # aaddf 16        # &right_gapbuf->gap_start
2E       # imload          # right_gapbuf->gap_start
14 16 47 # aldc 5703       # s[5703] = "tbuf.c0:143.5-144.40"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, 8, right_gapbuf->buffer, 0, right_gapbuf->gap_start, "tbuf.c0:143.5-144.40")
57       # pop             # (ignore result)
15 00    # vload 0         # point_node_data
62 08    # aaddf 8         # &point_node_data->buffer
2F       # amload          # point_node_data->buffer
15 00    # vload 0         # point_node_data
62 10    # aaddf 16        # &point_node_data->gap_start
2E       # imload          # point_node_data->gap_start
15 02    # vload 2         # right_gapbuf
62 08    # aaddf 8         # &right_gapbuf->buffer
2F       # amload          # right_gapbuf->buffer
15 02    # vload 2         # right_gapbuf
62 14    # aaddf 20        # &right_gapbuf->gap_end
2E       # imload          # right_gapbuf->gap_end
10 10    # bipush 16       # 16
15 02    # vload 2         # right_gapbuf
62 14    # aaddf 20        # &right_gapbuf->gap_end
2E       # imload          # right_gapbuf->gap_end
64       # isub            # (16 - right_gapbuf->gap_end)
14 16 5C # aldc 5724       # s[5724] = "tbuf.c0:145.5-147.43"
B8 00 27 # invokestatic 39 # array_copy(point_node_data->buffer, point_node_data->gap_start, right_gapbuf->buffer, right_gapbuf->gap_end, (16 - right_gapbuf->gap_end), "tbuf.c0:145.5-147.43")
57       # pop             # (ignore result)
A7 00 03 # goto +3         # goto <247:endif>
# <246:else>
# <247:endif>
# <244:endif>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<readline__1>
00 01             # number of arguments = 1
00 09             # number of local variables = 9
00 1D             # code length = 29 bytes
B7 00 0B # invokenative 11 # eof()
10 01    # bipush 1        # 
82       # ixor            # !(eof())
14 1D E4 # aldc 7652       # s[7652] = "/afs/andrew/course/15/122/lib/conio.h0:14.6-14.22: @requires annotation failed\n"
15 00    # vload 0         # _caller
14 1E 34 # aldc 7732       # s[7732] = ": caller location"
B7 00 01 # invokenative 1  # string_join(_caller, ": caller location")
B7 00 01 # invokenative 1  # string_join("/afs/andrew/course/15/122/lib/conio.h0:14.6-14.22: @requires annotation failed\n", string_join(_caller, ": caller location"))
CF       # assert          # assert!(eof()) [failure message on stack]
B7 00 0C # invokenative 12 # readline()
36 01    # vstore 1        # _result = readline();
15 01    # vload 1         # _result
B0       # return          # 


#<visualize_gapbuf>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
00 A1             # code length = 161 bytes
10 00    # bipush 0        # 0
36 02    # vstore 2        # i = 0;
# <280:loop>
A7 00 03 # goto +3         # goto <281:body>
# <281:body>
15 02    # vload 2         # i
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
A1 00 06 # if_icmplt +6    # if (i < G->gap_start) goto <283:then>
A7 00 1A # goto +26        # goto <284:else>
# <283:then>
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 02    # vload 2         # i
63       # aadds           # &G->buffer[i]
34       # cmload          # G->buffer[i]
B7 00 0D # invokenative 13 # printchar(G->buffer[i])
57       # pop             # (ignore result)
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 00 06 # goto +6         # goto <285:endif>
# <284:else>
A7 00 06 # goto +6         # break
# <285:endif>
A7 FF D6 # goto -42        # goto <280:loop>
# <282:exit>
10 5B    # bipush 91       # '['
B7 00 0D # invokenative 13 # printchar('[')
57       # pop             # (ignore result)
15 00    # vload 0         # G
62 10    # aaddf 16        # &G->gap_start
2E       # imload          # G->gap_start
36 02    # vstore 2        # i = G->gap_start;
# <286:loop>
A7 00 03 # goto +3         # goto <287:body>
# <287:body>
15 02    # vload 2         # i
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
A1 00 06 # if_icmplt +6    # if (i < G->gap_end) goto <289:then>
A7 00 13 # goto +19        # goto <290:else>
# <289:then>
10 2E    # bipush 46       # '.'
B7 00 0D # invokenative 13 # printchar('.')
57       # pop             # (ignore result)
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 00 06 # goto +6         # goto <291:endif>
# <290:else>
A7 00 06 # goto +6         # break
# <291:endif>
A7 FF DD # goto -35        # goto <286:loop>
# <288:exit>
10 5D    # bipush 93       # ']'
B7 00 0D # invokenative 13 # printchar(']')
57       # pop             # (ignore result)
15 00    # vload 0         # G
62 14    # aaddf 20        # &G->gap_end
2E       # imload          # G->gap_end
36 02    # vstore 2        # i = G->gap_end;
# <292:loop>
A7 00 03 # goto +3         # goto <293:body>
# <293:body>
15 02    # vload 2         # i
15 00    # vload 0         # G
62 00    # aaddf 0         # &G->limit
2E       # imload          # G->limit
A1 00 06 # if_icmplt +6    # if (i < G->limit) goto <295:then>
A7 00 1A # goto +26        # goto <296:else>
# <295:then>
15 00    # vload 0         # G
62 08    # aaddf 8         # &G->buffer
2F       # amload          # G->buffer
15 02    # vload 2         # i
63       # aadds           # &G->buffer[i]
34       # cmload          # G->buffer[i]
B7 00 0D # invokenative 13 # printchar(G->buffer[i])
57       # pop             # (ignore result)
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 00 06 # goto +6         # goto <297:endif>
# <296:else>
A7 00 06 # goto +6         # break
# <297:endif>
A7 FF D6 # goto -42        # goto <292:loop>
# <294:exit>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<visualize_buf>
00 02             # number of arguments = 2
00 09             # number of local variables = 9
00 88             # code length = 136 bytes
14 1E 46 # aldc 7750       # s[7750] = "START"
B7 00 0E # invokenative 14 # print("START")
57       # pop             # (ignore result)
15 00    # vload 0         # B
62 00    # aaddf 0         # &B->start
2F       # amload          # B->start
62 08    # aaddf 8         # &B->start->next
2F       # amload          # B->start->next
36 02    # vstore 2        # L = B->start->next;
# <298:loop>
A7 00 03 # goto +3         # goto <299:body>
# <299:body>
15 02    # vload 2         # L
15 00    # vload 0         # B
62 10    # aaddf 16        # &B->end
2F       # amload          # B->end
A0 00 06 # if_cmpne +6     # if (L != B->end) goto <301:then>
A7 00 5A # goto +90        # goto <302:else>
# <301:then>
14 1E 4C # aldc 7756       # s[7756] = " <--> "
B7 00 0E # invokenative 14 # print(" <--> ")
57       # pop             # (ignore result)
15 02    # vload 2         # L
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
9F 00 06 # if_cmpeq +6     # if (L == B->point) goto <304:then>
A7 00 0D # goto +13        # goto <305:else>
# <304:then>
14 1E 53 # aldc 7763       # s[7763] = "_"
B7 00 0E # invokenative 14 # print("_")
57       # pop             # (ignore result)
A7 00 03 # goto +3         # goto <306:endif>
# <305:else>
# <306:endif>
10 27    # bipush 39       # '\''
B7 00 0D # invokenative 13 # printchar('\'')
57       # pop             # (ignore result)
15 02    # vload 2         # L
62 00    # aaddf 0         # &L->data
2F       # amload          # L->data
14 1E 55 # aldc 7765       # s[7765] = "tbuf-test.c0:30.22-30.47"
B8 00 2A # invokestatic 42 # visualize_gapbuf(L->data, "tbuf-test.c0:30.22-30.47")
57       # pop             # (ignore result)
10 27    # bipush 39       # '\''
B7 00 0D # invokenative 13 # printchar('\'')
57       # pop             # (ignore result)
15 02    # vload 2         # L
15 00    # vload 0         # B
62 08    # aaddf 8         # &B->point
2F       # amload          # B->point
9F 00 06 # if_cmpeq +6     # if (L == B->point) goto <307:then>
A7 00 0D # goto +13        # goto <308:else>
# <307:then>
14 1E 6E # aldc 7790       # s[7790] = "_"
B7 00 0E # invokenative 14 # print("_")
57       # pop             # (ignore result)
A7 00 03 # goto +3         # goto <309:endif>
# <308:else>
# <309:endif>
15 02    # vload 2         # L
62 08    # aaddf 8         # &L->next
2F       # amload          # L->next
36 02    # vstore 2        # L = L->next;
A7 00 06 # goto +6         # goto <303:endif>
# <302:else>
A7 00 06 # goto +6         # break
# <303:endif>
A7 FF 96 # goto -106       # goto <298:loop>
# <300:exit>
14 1E 70 # aldc 7792       # s[7792] = " <--> END"
B7 00 0F # invokenative 15 # println(" <--> END")
57       # pop             # (ignore result)
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<process_char>
00 03             # number of arguments = 3
00 09             # number of local variables = 9
00 79             # code length = 121 bytes
15 01    # vload 1         # c
10 3C    # bipush 60       # '<'
9F 00 06 # if_cmpeq +6     # if (c == '<') goto <310:then>
A7 00 16 # goto +22        # goto <311:else>
# <310:then>
14 1E 7A # aldc 7802       # s[7802] = "<= : "
B7 00 0E # invokenative 14 # print("<= : ")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1E 80 # aldc 7808       # s[7808] = "tbuf-test.c0:39.5-39.21"
B8 00 21 # invokestatic 33 # tbuf_backward(B, "tbuf-test.c0:39.5-39.21")
57       # pop             # (ignore result)
A7 00 5C # goto +92        # goto <312:endif>
# <311:else>
15 01    # vload 1         # c
10 3E    # bipush 62       # '>'
9F 00 06 # if_cmpeq +6     # if (c == '>') goto <313:then>
A7 00 16 # goto +22        # goto <314:else>
# <313:then>
14 1E 98 # aldc 7832       # s[7832] = "=> : "
B7 00 0E # invokenative 14 # print("=> : ")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1E 9E # aldc 7838       # s[7838] = "tbuf-test.c0:42.5-42.20"
B8 00 20 # invokestatic 32 # tbuf_forward(B, "tbuf-test.c0:42.5-42.20")
57       # pop             # (ignore result)
A7 00 3F # goto +63        # goto <315:endif>
# <314:else>
15 01    # vload 1         # c
10 5E    # bipush 94       # '^'
9F 00 06 # if_cmpeq +6     # if (c == '^') goto <316:then>
A7 00 16 # goto +22        # goto <317:else>
# <316:then>
14 1E B6 # aldc 7862       # s[7862] = "del: "
B7 00 0E # invokenative 14 # print("del: ")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1E BC # aldc 7868       # s[7868] = "tbuf-test.c0:45.5-45.19"
B8 00 23 # invokestatic 35 # tbuf_delete(B, "tbuf-test.c0:45.5-45.19")
57       # pop             # (ignore result)
A7 00 22 # goto +34        # goto <318:endif>
# <317:else>
14 1E D4 # aldc 7892       # s[7892] = "\'"
B7 00 0E # invokenative 14 # print("\'")
57       # pop             # (ignore result)
15 01    # vload 1         # c
B7 00 0D # invokenative 13 # printchar(c)
57       # pop             # (ignore result)
14 1E D6 # aldc 7894       # s[7894] = "\': "
B7 00 0E # invokenative 14 # print("\': ")
57       # pop             # (ignore result)
15 00    # vload 0         # B
15 01    # vload 1         # c
14 1E DA # aldc 7898       # s[7898] = "tbuf-test.c0:48.5-48.22"
B8 00 22 # invokestatic 34 # tbuf_insert(B, c, "tbuf-test.c0:48.5-48.22")
57       # pop             # (ignore result)
# <318:endif>
# <315:endif>
# <312:endif>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<process_string>
00 03             # number of arguments = 3
00 09             # number of local variables = 9
00 47             # code length = 71 bytes
15 01    # vload 1         # s
B7 00 00 # invokenative 0  # string_length(s)
36 03    # vstore 3        # limit = string_length(s);
10 00    # bipush 0        # 0
36 04    # vstore 4        # i = 0;
# <319:loop>
A7 00 03 # goto +3         # goto <320:body>
# <320:body>
15 04    # vload 4         # i
15 03    # vload 3         # limit
A1 00 06 # if_icmplt +6    # if (i < limit) goto <322:then>
A7 00 29 # goto +41        # goto <323:else>
# <322:then>
15 00    # vload 0         # B
15 01    # vload 1         # s
15 04    # vload 4         # i
14 1E F2 # aldc 7922       # s[7922] = "tbuf-test.c0:56.21-56.40"
B8 00 01 # invokestatic 1  # string_charat__1(s, i, "tbuf-test.c0:56.21-56.40")
14 1F 0B # aldc 7947       # s[7947] = "tbuf-test.c0:56.5-56.41"
B8 00 2C # invokestatic 44 # process_char(B, string_charat__1(s, i, "tbuf-test.c0:56.21-56.40"), "tbuf-test.c0:56.5-56.41")
57       # pop             # (ignore result)
15 00    # vload 0         # B
14 1F 23 # aldc 7971       # s[7971] = "tbuf-test.c0:57.5-57.21"
B8 00 2B # invokestatic 43 # visualize_buf(B, "tbuf-test.c0:57.5-57.21")
57       # pop             # (ignore result)
15 04    # vload 4         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 04    # vstore 4        # i += 1;
A7 00 06 # goto +6         # goto <324:endif>
# <323:else>
A7 00 06 # goto +6         # break
# <324:endif>
A7 FF CA # goto -54        # goto <319:loop>
# <321:exit>
10 00    # bipush 0        # dummy return value
B0       # return          # 


#<test>
00 01             # number of arguments = 1
00 09             # number of local variables = 9
00 9C             # code length = 156 bytes
10 10    # bipush 16       # 16
36 01    # vstore 1        # len = 16;
14 1F 3B # aldc 7995       # s[7995] = "tbuf-test.c0:64.13-64.23"
B8 00 1E # invokestatic 30 # tbuf_new("tbuf-test.c0:64.13-64.23")
36 02    # vstore 2        # B = tbuf_new("tbuf-test.c0:64.13-64.23");
14 1F 54 # aldc 8020       # s[8020] = "Visualizing text buffers:"
B7 00 0E # invokenative 14 # print("Visualizing text buffers:")
57       # pop             # (ignore result)
14 1F 6E # aldc 8046       # s[8046] = " doubly linked lists of 16-element gap buffers."
B7 00 0F # invokenative 15 # println(" doubly linked lists of 16-element gap buffers.")
57       # pop             # (ignore result)
14 1F 9E # aldc 8094       # s[8094] = "The \'<\' character mimics going backwards (left arrow key)"
B7 00 0F # invokenative 15 # println("The \'<\' character mimics going backwards (left arrow key)")
57       # pop             # (ignore result)
14 1F D8 # aldc 8152       # s[8152] = "The \'>\' character mimics going forwards (right arrow key)"
B7 00 0F # invokenative 15 # println("The \'>\' character mimics going forwards (right arrow key)")
57       # pop             # (ignore result)
14 20 12 # aldc 8210       # s[8210] = "The \'^\' character mimics deletion (delete key)"
B7 00 0F # invokenative 15 # println("The \'^\' character mimics deletion (delete key)")
57       # pop             # (ignore result)
14 20 41 # aldc 8257       # s[8257] = "All other characters just insert that character"
B7 00 0F # invokenative 15 # println("All other characters just insert that character")
57       # pop             # (ignore result)
14 20 71 # aldc 8305       # s[8305] = ""
B7 00 0F # invokenative 15 # println("")
57       # pop             # (ignore result)
14 20 72 # aldc 8306       # s[8306] = "Give initial input (empty line quits):"
B7 00 0F # invokenative 15 # println("Give initial input (empty line quits):")
57       # pop             # (ignore result)
14 20 99 # aldc 8345       # s[8345] = "tbuf-test.c0:74.14-74.24"
B8 00 29 # invokestatic 41 # readline__1("tbuf-test.c0:74.14-74.24")
36 03    # vstore 3        # s = readline__1("tbuf-test.c0:74.14-74.24");
# <325:loop>
A7 00 03 # goto +3         # goto <326:body>
# <326:body>
14 20 B2 # aldc 8370       # s[8370] = ""
15 03    # vload 3         # s
B7 00 10 # invokenative 16 # string_equal("", s)
10 01    # bipush 1        # true
9F 00 3A # if_cmpeq +58    # if (string_equal("", s) == true) goto <329:else>
A7 00 03 # goto +3         # goto <328:then>
# <328:then>
14 20 B3 # aldc 8371       # s[8371] = "     "
B7 00 0E # invokenative 14 # print("     ")
57       # pop             # (ignore result)
15 02    # vload 2         # B
14 20 B9 # aldc 8377       # s[8377] = "tbuf-test.c0:78.5-78.21"
B8 00 2B # invokestatic 43 # visualize_buf(B, "tbuf-test.c0:78.5-78.21")
57       # pop             # (ignore result)
14 20 D1 # aldc 8401       # s[8401] = ""
B7 00 0F # invokenative 15 # println("")
57       # pop             # (ignore result)
15 02    # vload 2         # B
15 03    # vload 3         # s
14 20 D2 # aldc 8402       # s[8402] = "tbuf-test.c0:80.5-80.25"
B8 00 2D # invokestatic 45 # process_string(B, s, "tbuf-test.c0:80.5-80.25")
57       # pop             # (ignore result)
14 20 EA # aldc 8426       # s[8426] = "Done. More input\? (empty line quits):"
B7 00 0F # invokenative 15 # println("Done. More input\? (empty line quits):")
57       # pop             # (ignore result)
14 21 10 # aldc 8464       # s[8464] = "tbuf-test.c0:82.9-82.19"
B8 00 29 # invokestatic 41 # readline__1("tbuf-test.c0:82.9-82.19")
36 03    # vstore 3        # s = readline__1("tbuf-test.c0:82.9-82.19");
A7 00 06 # goto +6         # goto <330:endif>
# <329:else>
A7 00 06 # goto +6         # break
# <330:endif>
A7 FF B6 # goto -74        # goto <325:loop>
# <327:exit>
10 00    # bipush 0        # dummy return value
B0       # return          # 

00 11             # native count
# native pool
00 01 00 65       # string_length
00 02 00 64       # string_join
00 02 00 5D       # string_charat
00 03 00 66       # string_sub
00 02 00 5E       # string_compare
00 01 00 62       # string_fromchar
00 02 00 67       # string_terminated
00 01 00 68       # string_to_chararray
00 01 00 60       # string_from_chararray
00 01 00 5C       # char_ord
00 01 00 5B       # char_chr
00 00 00 04       # eof
00 00 00 0B       # readline
00 01 00 08       # printchar
00 01 00 06       # print
00 01 00 0A       # println
00 02 00 5F       # string_equal

